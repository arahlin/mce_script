#!/usr/bin/python
import sys
import getopt
import time
import os 
import select
import tty

from sys import *
from os import *
from mce import *
from mce_data import *

##### Threshold setting for serial and parallel DACs test #####
test_version = 1
sdac_fixed_value = [0, 32768, 65535]
sramp_start = 0
sramp_end = 65535
ssquare_wave = [0, 65535]
smid_value = 32768
timeout = 0.0

pdac_fixed_value = [-8192, 0, 8191]
pramp_start = -8192
pramp_end = 8191
psquare_wave = [-8192, 8191]
pmid_value = 0 

###########################################

def Usage():
  print """Usage:
  %s [-c x] [-n #] CARD_ID
where: 
  CARD_ID the serial number of the card to test.
  -n RC   readout-card # (1 2 3 4) default=1
  -c CH   channel number (0 1 ... 7) default: all-channels (0 to 7)

""" % (sys.argv[0])
  sys.exit(2)

try:
  optlist, argv = getopt.getopt(sys.argv[1:], 'n:c:')
except getopt.GetoptError, err:
  print str(err)
  Usage()

if (len(argv) < 1):
  Usage()
card_snum = argv[0]
card_num  = 1
card_name = "rc"
ch_start = 0
ch_end = 8 

for o,a in optlist:
  if o == '-n':
    card_num = int(a)
  if o == '-c':
    ch_start = int(a)
    ch_end = ch_start + 1

card = "%s%i"% (card_name, card_num)

#mas_data_dir = environ["MAS_DATA"]
#print "\nExecuting set_directory"
#system("set_directory")

#result_file = "%s%s_%i_rc_test" % (mas_data_dir, card_snum, int(time.time()))

print "Running rc_test version %i" % (test_version)

m=mce()

##########################
# DAC fixed-value test
##########################
for j in range(0, 3):
  print "Fix-value test: In this test 0, mid-range, and full-range values are loaded into DACS, probe the outputs to verify"
  print "Loading serial and parallel DACs %i to %i with %i (for serial) and %i (for parallel)" % (ch_start, ch_end-1, sdac_fixed_value[j],pdac_fixed_value[j])
  print "Note: full-range for serial DACs is 2.5V and for Parallel DACs is 1V"
  for i in range(ch_start, ch_end):
    m.write(card, 'sa_bias', [sdac_fixed_value[j]], offset=i)
    m.write(card, 'offset', [sdac_fixed_value[j]], offset=i)
    m.write(card, 'fb_const', [pdac_fixed_value[j]], offset=i)
  raw_input("Press Enter to Continue")
  
##########################
# DAC ramp test
##########################
print " In this test, a ramp is generated on the ouput of all DACs, probe the outputs to verify"
print "Starting a full-range Ramp on ch %i to %i serial and Parallel DACS" % (ch_start, ch_end-1)
print "Note: full-range for serial DACs is 2.5V and for Parallel DACs is 1V"
try:
  while True:
    for j in range (sramp_start, sramp_end, 100):
      a = []
      for i in range (ch_start, ch_end):
        a.append(j) 
      m.write(card, 'sa_bias', a)
      m.write(card, 'offset', a)
      m.write(card, 'fb_const', a)

except KeyboardInterrupt:
  pass

#print "Starting a full-range Ramp on ch %i to %i Parallel DACS" % (ch_start, ch_end-1)
#try:
#  while True:
#    for j in range(pramp_start, pramp_end, 100): 
#      b = []
#      for i in range (ch_start, ch_end):
#        b.append(j)
#      m.write(card, 'fb_const', b)
#
#except KeyboardInterrupt:
#  pass
##########################
# DAC cross-talk test 
##########################
if ch_end - ch_start > 1:
  try: 
    print "Starting a square-wave on all ODD-numbered channels & mid-range value on all EVEN-numbered channels"
    while True:
      for flip in (0, 1):
        for i in range(ch_start, ch_end):
          if i%2 == 1:
            m.write(card, 'sa_bias', [ssquare_wave[flip]],  offset=i)
          else:
            m.write(card, 'sa_bias', [smid_value], offset=i)
        time.sleep(0.005)
      
    print "Starting a square-wave on all EVEN-numbered channels & mid-range value on all ODD-numbered channels"
    while True:
      for flip in (0, 1):
        for i in range(ch_start, ch_end):
          if i%2 != 1:
            m.write(card, 'offset', [ssquare_wave[flip]],  offset=i)
          else:
            m.write(card, 'offset', [smid_value], offset=i)
        time.sleep(0.005)

    print "Starting a square-wave on all ODD-numbered channels & mid-range value on all EVEN-numbered channels"
    while True:
      for flip in (0, 1):
        for i in range(ch_start, ch_end):
          if i%2 == 1:
            m.write(card, 'fb_const', [psquare_wave[flip]],  offset=i)
          else:
            m.write(card, 'fb_const', [pmid_value], offset=i)
        time.sleep(0.005)
         
  except KeyboardInterrupt:
    pass
else:
  print "skip cross-talk test ..."  

print "Unit Under Test  : ", card
print "Serial Number    : ", card_snum 

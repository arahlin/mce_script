#!/usr/bin/python
import sys
import getopt
import time
import os 
import select
import termios
import tty

from sys import *
from os import *
from mce import *
from mce_data import *

##### Threshold setting for this test #####
test_version = 1
dac_fixed_value = [0, 32768, 65535]
ramp_start = 0
ramp_end = 65536
square_wave = [0, 65535]
mid_value = 32768
timeout = 0.0
###########################################

def Usage():
  print """Usage:
  %s [-c xx] [-n #] [-c #] CARD_ID
where: 
  CARD_ID the serial number of the card to test.
  -n BC   bias-card # (1 2 3) default=1
  -c CH   channel number (0 1 ... 31) default: 0 to 31
  -b LN   number of low-noise bias lines (0 1 ...10) default: 2

""" % (sys.argv[0])
  sys.exit(2)

try:
  optlist, argv = getopt.getopt(sys.argv[1:], 'n:c:b:')
except getopt.GetoptError, err:
  print str(err)
  Usage()

if (len(argv) < 1):
  Usage()
card_snum = argv[0]
card_num  = 1
card_name = "bc"
ch_start = 0
ch_end = 32
ln_ch_start = 0
ln_ch_end = 2

for o,a in optlist:
  if o == '-n':
    card_num = int(a)
  if o == '-c':
    ch_start = int(a)
    ch_end = ch_start + 1
  if o == '-b':
    ln_ch_start = 0
    ln_ch_end = 2

card = "%s%i"% (card_name, card_num)

#mas_data_dir = environ["MAS_DATA"]
#print "\nExecuting set_directory"
#system("set_directory")

#result_file = "%s%s_%i_bc_test" % (mas_data_dir, card_snum, int(time.time()))

print "Running bc_test version %i" % (test_version)

m=mce()

##########################
# DAC fixed-value test
##########################
for j in range(0, 3):
  print "Loading DACs %i to %i with %i" % (ch_start, ch_end, dac_fixed_value[j])
  for i in range(ch_start, ch_end):
    m.write(card, 'flux_fb', [dac_fixed_value[j]], offset=i)
  raw_input("Press Enter to Continue")
  
##########################
# DAC ramp test
##########################
save_attrs = termios.tcgetattr(sys.stdin.fileno())
tty.setcbreak(sys.stdin.fileno())
print "Starting a full-range Ramp on ch %i to %i" % (ch_start, ch_end)
#for i in range(ch_start, ch_end):
while True:
  for j in range (ramp_start, ramp_end, 1000):
    a = []
    for i in range (ch_start, ch_end):
      a.append(j) 
    m.write(card, 'flux_fb', a)
  
  (input_ready, _, _) = select.select((sys.stdin,), (), (), timeout)
  if sys.stdin in input_ready :
    break
    #raw_input("Press Enter to Continue")

termios.tcsetattr(sys.stdin.fileno(), termios.TCSAFLUSH, save_attrs) 
##########################
# DAC cross-talk test 
##########################
if ch_end - ch_start > 1:
  print "Starting a square-wave on all ODD-numbered channels & mid-range value on all EVEN-numbered channels"
  while True:
    for flip in (0, 1):
      for i in range(ch_start, ch_end):
        if i%2 == 1:
          m.write(card, 'flux_fb', [square_wave[flip]],  offset=i)
        else:
          m.write(card, 'flux_fb', [mid_value], offset=i)
      time.sleep(0.005)
      
    (input_ready, _, _) = select.select((sys.stdin,), (), (), timeout)
    if sys.stdin in input_ready :
      break
  
  termios.tcsetattr(sys.stdin.fileno(), termios.TCSAFLUSH, save_attrs) 
  print "Starting a square-wave on all EVEN-numbered channels & mid-range value on all ODD-numbered channels"
  while True:
    for flip in (0, 1):
      for i in range(ch_start, ch_end):
        if i%2 != 1:
          m.write(card, 'flux_fb', [square_wave[flip]],  offset=i)
        else:
          m.write(card, 'flux_fb', [mid_value], offset=i)
      time.sleep(0.005)

    (input_ready, _, _) = select.select((sys.stdin,), (), (), timeout)
    if sys.stdin in input_ready :
      break

  termios.tcsetattr(sys.stdin.fileno(), termios.TCSAFLUSH, save_attrs) 

else:
  print "skip cross-talk test ..."  

print "Unit Under Test  : ", card
print "Serial Number    : ", card_snum 

#!/bin/bash

#initialise environment
if [ ! -x ${MAS_VAR:=/usr/mce/bin/mas_var} ]; then
  echo "Cannot find mas_var.  Set MAS_VAR to the full path to the mas_var binary." >&2
  exit 1
else
  eval $(${MAS_VAR} -s)
fi

source $MAS_TEST_SUITE/test_suite_library.bash

path_name=${0%/*}
file_name=${0##*/}
base_name=${file_name%%.*}
extn_name=${file_name#*.}

#---------------------------------------------------------------
# Functions
#---------------------------------------------------------------
function usage {
  echo "----------------------------------------------------------------"
  echo "$file_name <path/log_file_name> <MCEv#>"
  echo "----------------------------------------------------------------"
  echo "  <path/log_file_name>: required"
  echo ""
  echo "  <MCEv#>: required"
  echo "    1  = MCEv1"
  echo "    2  = MCEv2"
  echo "----------------------------------------------------------------"
  exit 1
}

if [ "$#" -lt 2 ]; then
  usage
  exit 1
fi

#TMP="$MAS_TEMP/$0.tmp"
TMP="$0.scr"
LOG=$1
mce=$2

today=`date`
echo2 $LOG "$0 run under MAS on $today"

# take data and compare results
#echo2_and_issue $tlog "mce_cmd -q -x WB rca data_mode 1"

LAST_STEP=9

for rc in `seq 1 4`; do
  echo2 $LOG "---------------------------------------------------------------------"
  echo2 $LOG "Plug the SQUID emulator board in the MDM for RC$rc, and press [ENTER]"
  echo2 $LOG "---------------------------------------------------------------------"
  read whatever
  for sig in `seq 1 7`; do
    for col in `seq 1 8`; do
      echo2 $LOG "--------------------------------------------"
      echo2 $LOG "RC$rc, Column $(($col-1))"
      if [ $sig -eq 1 ]; then
        echo2 $LOG "(SQ2_FB, ADC_SAMPLE)"
        SAO=5500
        STEP_SIZE=6000
      elif [ $sig -eq 2 ]; then
        echo2 $LOG "(SQ1_FB, ADC_SAMPLE)"
        SAO=0
        STEP_SIZE=1500
      elif [ $sig -eq 3 ]; then
        echo2 $LOG "(SA_FB, ADC_SAMPLE)"
        SAO=5500
        STEP_SIZE=6000
      elif [ $sig -eq 4 ]; then
        echo2 $LOG "(SQ2_BIAS, ADC_SAMPLE)"
        SAO=5500
        STEP_SIZE=6000
      elif [ $sig -eq 5 ]; then
        echo2 $LOG "(SA_BIAS, ADC_SAMPLE)"
        SAO=0
        STEP_SIZE=6000
      elif [ $sig -eq 6 ]; then
        echo2 $LOG "(SA_OFFSET, ADC_SAMPLE)"
        SAO=0
        SAB=8191
        STEP_SIZE=600
      elif [ $sig -eq 7 ]; then
        echo2 $LOG "(TES_BIAS, ADC_SAMPLE)"
        SAO=5500
        STEP_SIZE=6000
      else
        echo2 $LOG "Invalid Test"
      fi
      echo2 $LOG "--------------------------------------------"

      for i in `seq 0 $LAST_STEP`; do
        val=$(($i*$STEP_SIZE))
        /bin/rm $MAS_DATA/bryce.data
    
        echo "wb rc$rc data_mode 0">$TMP
        echo "wb rc$rc sample_num 1">>$TMP
        echo "wb rc$rc offset $SAO $SAO $SAO $SAO $SAO $SAO $SAO $SAO">>$TMP
    
        # This causes problems because the default row_len=64
        # echo "wb rc$rc sample_dly 90">>$TMP
    
        if [ $sig -eq 1 ]; then
          # 2nd Stage SQUID Feedback
          echo "wra bc2 flux_fb $((($rc-1)*8+$col-1)) $val">>$TMP    
        elif [ $sig -eq 2 ]; then
          # 1st Stage SQUID Feedback
          val=$(($val-8192))
          echo "wb rc$rc servo_mode 1">>$TMP
          echo "wra rc$rc fb_const $(($col-1)) $val">>$TMP
        elif [ $sig -eq 3 ]; then
          # SQUID Series Array Feedback
          echo "wra bc1 flux_fb $((($rc-1)*8+$col-1)) $val">>$TMP    
        elif [ $sig -eq 4 ]; then
          # 2nd Stage SQUID Bias
          if [ $mce -eq 1 ]; then
            # MCEv1
            echo "wra bc3 flux_fb $((($rc-1)*8+$col-1)) $val">>$TMP    
          else
            # MCEv2
            echo "wra bc1 flux_fb_upper $((($rc-1)*8+$col-1)) $val">>$TMP    
          fi            
        elif [ $sig -eq 5 ]; then
          # SQUID Series Array Bias
          echo "wra rc$rc sa_bias $(($col-1)) $val">>$TMP          
        elif [ $sig -eq 6 ]; then
          # SQUID Series Array Offset
          val=$(($LAST_STEP*$STEP_SIZE - $val))
          echo "wra rc$rc offset $(($col-1)) $val">>$TMP     
        elif [ $sig -eq 7 ]; then
          # TES Bias
          if [ $mce -eq 1 ]; then
            # MCEv1
            break
          else
            # MCEv2
            echo "wra bc3 flux_fb_upper $((($rc-1)*8+$col-1)) $val">>$TMP    
          fi            
        else
          echo2 $LOG "Invalid Test"
        fi

        echo "acq_config $MAS_DATA/bryce.data rc$rc">>$TMP
        echo "acq_go 1">>$TMP
        mce_cmd -q -f $TMP

        #a=`ascii_frame 41 8 $MAS_DATA/bryce.data 0 "%8i"|awk 'NR==2 {print}'`
        #echo $a
        a=`ascii_frame 41 8 $MAS_DATA/bryce.data 0 "%8i"|awk 'NF==8 && NR==2 {print $'$col'}'`
      
        if [ $a -eq 8191 -o $a -eq -8192 ]; then
          saturation="Saturated Pre-Amp"
        else
          saturation="-----------------"
        fi
    
        if [ $i -ge 1 ]; then
          if [ $a -ge $b ]; then
            result="pass"
          else
            result="fail"
          fi
        else
          result="xxxx"
        fi
   
        echo2 $LOG "$result : $saturation : ($val, $a)"
        b=$a
  
      done
      echo2 $LOG "Zeroing all biasing DACs."
      mce_zero_bias
      echo2 $LOG "Resetting the MCE."
      `mce_cmd -q -x mce_reset`
      echo2 $LOG "" 
    done
  done
  
  if [ $rc -eq 2 -a $mce -eq 2 ]; then
    break
  fi
done

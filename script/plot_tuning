#!/usr/bin/python

import os
import auto_setup as ast
from optparse import OptionParser

usage = """
%prog [options] tuning_directory [output_directory]

If output_directory is ommitted, ./ is used.
"""

o = OptionParser(usage=usage)
o.add_option('-i','--interactive',action='store_true',default=False)
o.add_option('-s','--stage',action='append',default=None)
o.add_option('--summary',action='store_true',default=False,help=
             "For bias ramps, plot only the final bias choice.")
o.add_option('-m','--format',default=None,help=
             "Set output format (png, svg, pdf).")
o.add_option('--default-slope', type='float', default=None)
o.add_option('--config-file', default=None)
opts, args = o.parse_args()

if len(args) > 2 or len(args) <= 0:
    o.error('Pass 1 or 2 arguments.')

odir = './'
if len(args) == 2:
    odir = args[1]

source_dir = args[0]
basename = source_dir.strip('/').split('/')[-1]
# Try '/home/data/act/2010/startup/1269227063/'

if opts.interactive:
    ast.util.interactive_errors()

if not os.path.exists(odir):
    os.makedirs(odir)

default_ops = ['sa_ramp', 'sq2_servo', 'sq1_servo', 'sq1_ramp',
               'sq1_ramp_check', 'sq1_ramp_tes']

if opts.stage == None:
    opts.stage = default_ops
else:
    for op in opts.stage:
        if not op in default_ops:
            print 'Unknown stage "%s" ignored.' % op

# Group files
tf = ast.util.FileSet(source_dir)

# Do we have an experiment.cfg?
if opts.config_file == None:
    # There's probably one with the tuning data.
    opts.config_file = tf.get('cfg_file', None)

if opts.config_file == None:
    tuning = None
else:
    tuning = ast.util.tuningData(exp_file=opts.config_file)

slope = opts.default_slope 

def check_slope():
    if slope == None and tuning == None:
        o.error("No experiment.cfg data could be found for this tuning.  Pass "
                "in a filename with --config-file, or specify a default locking "
                "slope with --default-slope.")

class_map = {
    'sa_ramp': ast.SARamp,
    'sq2_servo': ast.SQ2Servo,
    'sq1_servo': ast.SQ1Servo,
#    'rs_servo': ast.rsServo,
#    'sq1_servo_sa': ast.SQ1ServoSA,
    'sq1_ramp': ast.SQ1Ramp,
    'sq1_ramp_check': ast.SQ1Ramp,
    'sq1_ramp_tes': ast.SQ1RampTes,
}
    

for stage in opts.stage:
    print 'Stage %s' % stage
    # Get the object type for this stage, try to build it.
    cls = class_map.get(stage, None)
    if cls != None:
        # Default handling
        ss = [ cls(x, tuning=tuning) for x in tf.stage_all(stage) ]
        if len(ss) == 0:
            print ' -> no data for %s' % stage
            continue
        s = cls.join(ss)

    # Per stage handling
    if stage == 'sa_ramp':
        s.reduce1()
        if s.bias_style == 'ramp':
            s2 = s.subselect()
        else:
            s2 = s
        check_slope()
        s.reduce(slope=slope)
        print ' -> plotting'
        s.plot(plot_file='%s/%s_sa_ramp' % (odir, basename),
                format=opts.format)
    elif stage in ['sq1_servo', 'sq2_servo']:
        if s.bias_style == 'ramp':
            if not opts.summary:
                print ' -> plotting each bias'
                # Plot data for every bias value
                s.plot(plot_file='%s/%s_%s' % (odir, basename, stage),
                       format=opts.format)
                s.plot_error(plot_file='%s/%s_%s_err' % (odir, basename, stage),
                             format=opts.format)
            # Flatten ramp to best bias choice
            s.reduce1()
            s = s.select_biases()
        s.reduce(slope=slope)
        print ' -> plotting summary'
        s.plot(plot_file='%s/%s_%s' % (odir, basename, stage),
               format=opts.format)
        s.plot_error(plot_file='%s/%s_%s_err' % (odir, basename, stage),
                     format=opts.format)
    elif stage in ['sq1_ramp', 'sq1_ramp_check', 'sq1_ramp_tes']:
        s.reduce()
        print ' -> plotting'
        s.plot(plot_file='%s/%s_%s' % (odir, basename, stage),
               format=opts.format)
    else:
        print ' -> pass'

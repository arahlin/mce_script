#!/bin/bash
# The following code is copied from Bryce Burger's sof2jam script

if [ "$#" -lt "2" ]; then
    echo "Usage:   $0 <device> <jamfilename> [jamfreq]"
    echo "  device        one of:"
    echo "          FPGA:   for temporary firmware (sof)"
    echo "          EPC16:  for permanent firmware on any card other than RC Rev. E (pof)"
    echo "          EPCS64: for permanent firmware on RC Rev. E (jic)"
    echo "  jamfilename   either an absolute pathname, or a file in \$MCE_JAM_DIR"
    ehco "  jamfreq is the internal clocking frequency."
    exit 1
fi

#initialise environment
if [ ! -x ${MAS_VAR:=/usr/mce/bin/mas_var} ]; then
  echo "Cannot find mas_var.  Set MAS_VAR to the full path to the mas_var binary." >&2
  exit 1
else
  eval $(${MAS_VAR} -s)
fi

function print_fw_rev {
    # Jump through some hoops to only issue fw_rev commands...
    mce_status -g | awk '($3 == "fw_rev" && $8 == "") {print $2}' | \
	while read card; do
	    printf " %4s : %s\n" "$card" "`mce_cmd -pqx rb $card fw_rev`"
    done
}


DEVICE=$1
JAM_DIR=$MCE_JAM_DIR
JAM_FILE=$2
START_TIME=`date +%s`

if [ "$3" != "" ] ; then
    JAM_FREQ=$3
fi

if ! [ -r $JAM_FILE ] && [ "$JAM_DIR" != "" ]; then
    echo "File not found in current directory, looking in $JAM_DIR"
    JAM_FILE=$JAM_DIR/$JAM_FILE
fi

if ! [ -r $JAM_FILE ]; then
  echo "Error: cannot find $2"
  echo
  exit 1
fi

echo " MCE firmware revisions prior to firmware update:"
print_fw_rev
cmd1=true
cmd2=true

case "$DEVICE" in
    EPC16)
	cmd1="mce_jam -u -f${JAM_FREQ:-800000} -aprogram -dDO_VERIFY=0 $JAM_FILE"
	;;
    EPCS64)
	cmd1="mce_jam -u -f${JAM_FREQ:-8000000} -aconfigure $JAM_FILE"
	cmd2="mce_jam -u -f${JAM_FREQ:-100000} -aprogram -dDO_VERIFY=0 $JAM_FILE"
	;;
    FPGA)
	cmd1="mce_jam -u -f${JAM_FREQ:-8000000} -aconfigure $JAM_FILE"
	;;
    *)
	echo "Error: device=$DEVICE is not a valid device."
	echo "  Use FPGA or EPC16 or EPCS64 to specify the device"
	exit 1
	;;
esac

for cmd in "$cmd1" "$cmd2"; do 
    echo "Executing: $cmd"
    $cmd
    err=$?
    echo "mce_jam exits with code ${err}."
    if [ "${err}" != 0 ]; then
	exit 1
    fi
    echo
done

echo " Configuration complete."

if [[ $DEVICE != "FPGA"  ]]; then
  echo "  Triggering Clock Card reconfiguration, which resets all other cards ..."
#  mce_cmd -q -x rs cc config_app 1
  echo "UNCOMMENT ME"
  sleep 15
fi

echo "  Reset PCI card and MCE.."
mce_cmd -q -x dsp_reset
sleep 2
mce_cmd -q -x mce_reset
sleep 2

echo "  Firmware revisions after firmware update:"
print_fw_rev

#---------------------------------------------------------------
echo " Script complete."
#---------------------------------------------------------------
END_TIME=`date +%s`
EXE_TIME=`expr $END_TIME - $START_TIME`
#echo "  Start time     = $START_TIME s"
#echo "  End time       = $END_TIME s"
echo "  Execution time = $EXE_TIME seconds"

exit 0


#!/usr/bin/python

import os, sys, time

from optparse import OptionParser

stages = ['ramp', 'analysis', 'bias']

o = OptionParser()
o.add_option('--first-stage')
o.add_option('--last-stage')
o.add_option('--stage')

o.add_option('--rc',default='s')

o.add_option('--ramp-file')
o.add_option('--analysis-file')

o.add_option('--no-bias',action='store_true')
o.add_option('--bias-only',action='store_true')
opts, args = o.parse_args()

if opts.first_stage == None:
    opts.first_stage = 0
else:
    opts.first_stage = stages.index(opts.first_stage)

if opts.last_stage == None:
    opts.last_stage = len(stages) - 1
else:
    opts.last_stage = stages.index(opts.last_stage)

if opts.stage != None:
    s = stages.index(opts.stage)
    opts.first_stage = s
    opts.last_stage = s


last_iv_link = '/data/cryo/last_iv.out'

def do_stage(stage):
    return stages.index(stage) >= opts.first_stage and \
        stages.index(stage) <= opts.last_stage

#
#  Run a ramp?
#
if do_stage('ramp'):
    if not opts.ramp_file:
        opts.ramp_file = '%i_iv' % (time.time())
    os.system('ramp_tes_bias %s %s' % (opts.ramp_file, opts.rc))
    opts.ramp_file = '/data/cryo/current_data/' + opts.ramp_file

#
#  Analyze the IV curve?
#
if do_stage('analysis'):
    ## Fix me: abort if analysis fails.
    os.system('python /usr/mce/mce_script/python/iv_analysis.py --summary %s' % 
              opts.ramp_file)
    # Link it
    link_exists = True
    if not os.path.exists(last_iv_link): # could be a broken link...
        try:
            os.readlink(last_iv_link)
        except OSError:
            link_exists = False
    if link_exists:
        os.remove(last_iv_link)
    opts.analysis_file = opts.ramp_file + '.out'
    os.symlink(opts.analysis_file, last_iv_link)

#
#  Apply the lastest biases?
#
if do_stage('bias'):
    from mce_data import MCERunfile
    rf = MCERunfile(opts.analysis_file)
    biases = rf.Item('IV', 'rec_biases', type='int', array=True)
    cmd = 'bias_tess ' + ' '.join(['%i' % x for x in biases])
    os.system(cmd)

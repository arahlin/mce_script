#!/usr/bin/env python

USAGE="""%prog [options]
%prog operation filename ...

This program does some combination of:
  - ramp      : acquire an IV curve
  - analyze   : analyze an IV curve
  - bias      : write the recommended biases to the MCE

By default, it does all of those things.  To only do the ramp and
analysis, pass --no-bias.  You can also do each thing individually.
Like this:

  %prog ramp [iv_filename]

        This will acquire an IV curve.  iv_filename is optional;
        <ctime>_iv is the default.

  %prog analyze [iv_filename]
  or
  %prog analysis [iv_filename]

        This will analyze the data in the iv file provided, producing
        plots and the .out analysis output.  Additional options:

           --do-plots=0     suppress plotting

           --do-analysis=0  suppress analysis (don't rewrite the .out
                            file)

  %prog bias [iv_analysis]

        Read the recommended TES biases from an IV analysis file and apply
        them.  This also creates the symbolic link "/data/cryo/last_iv.out",
        which is appended to subsequent runfiles, if you're lucky.

"""

import os, sys, time

from optparse import OptionParser

import mce_auto_assist as maa
from mce_data import MCERunfile
from auto_setup.util import mas_path
mas_path = mas_path()

from auto_setup.config import mas_param
exp_file = mas_path.data_dir() + '/experiment.cfg'

stages = ['ramp', 'analyze', 'bias']

def get_stage(stage):
    return stages.index(stage)

def do_stage(stage):
    if stage == 'bias' and opts.no_bias:
        return False
    i0, i1, i = [stages.index(x) for x in
                 [opts.first_stage, opts.last_stage, stage]]
    return (i0 <= i) and (i <= i1)

def true_path(linked_path, recursion=0):
    """
    Follow all symbolic links to get absolute, link-free path.
    """
    if recursion > 100:
        raise
    if linked_path == '':
        return ''
    if linked_path.endswith('/'):
        return true_path(linked_path[:-1],recursion+1) + '/'
    try:
        p = os.readlink(linked_path)
        return p
    except OSError:
        pass
    a, b = os.path.split(linked_path)
    return os.path.join(true_path(a, recursion+1), b)

def printe(err_msg):
    alog.write(err_msg, 'ERROR')
    print
    print 'auto_iv error : ', err_msg
    print


o = OptionParser(usage=USAGE)
o.add_option('--first-stage')
o.add_option('--last-stage')
o.add_option('--stage')

o.add_option('--rc',default='s')

o.add_option('--ramp-file')
o.add_option('--analysis-file')

o.add_option('--no-bias',action='store_true')

o.add_option('--do-plots', type=int, default=0)
o.add_option('--do-analysis', type=int, default=1)
o.add_option('--do-link', type=int, default=1)

o.add_option('--reg-note', default='')
o.add_option('--auto-log', default=None)

opts, args = o.parse_args()

default_config_file = os.path.join(mas_path.config_dir(), 'mce_auto.cfg')
cfg = maa.DefaultingConfig(default_config_file)
cfg.active_section = 'auto_iv'
cfg.default_section = 'default'
if opts.auto_log == None:
    opts.auto_log = cfg.getstr('auto_log', '').strip()
    if opts.auto_log == '':
        opts.auto_log = None

# Use reg-note as an indicator that we should auto-log
if opts.auto_log == None and opts.reg_note == '':
    opts.auto_log = '/dev/null'

alog = maa.AutoLogger(opts.auto_log, 'auto_iv')
alog.start_msg()

# This is dumb
translations = {'analysis': 'analyze'}
for k in ['first_stage', 'last_stage', 'stage']:
    v = getattr(opts, k)
    setattr(opts, k, translations.get(v, v))

# Let "args" do some obvious things
if len(args) > 0:
    opts.stage = args[0]
    # Weird ones...
    if opts.stage == 'plot':
        opts.stage = 'analyze'
        opts.do_analysis = 0
    if opts.stage == 'go':
        opts.stage = None  # trigger full thing
        if len(args) > 1:
            opts.ramp_file = args[1]
    elif opts.stage == 'ramp':
        if len(args) > 1:
            opts.ramp_file = args[1]
    elif opts.stage == 'analyze':
        opts.ramp_file = args[1]
    elif opts.stage =='bias':
        opts.analysis_file = args[1]

# Turn stage choice into a stage range.
if opts.first_stage == None:
    opts.first_stage = stages[0]
if opts.last_stage == None:
    opts.last_stage = stages[-1]

# Ultimate override...
if opts.stage != None:
    opts.first_stage = opts.stage
    opts.last_stage = opts.stage


last_iv_link = '/data/cryo/last_iv.out'

#
#  Run a ramp?
#
if do_stage('ramp'):
    # Check for MCE re-init to be safe
    os.system('mce_check_init -q')
    # Make a filename
    ctime = time.time()
    if not opts.ramp_file:
        opts.ramp_file = '%i_iv' % ctime
    err = os.system('ramp_tes_bias %s %s' % (opts.ramp_file, opts.rc))
    if err != 0:
        printe('ramp_tes_bias failed [%i], exiting' % err)
        o.exit(1)
    opts.ramp_file = '%s/%s' % (mas_path.data_dir(), opts.ramp_file)
    # Register acquisition
    rf = MCERunfile(opts.ramp_file+'.run')
    n_frames = rf.Item('FRAMEACQ', 'DATA_FRAMECOUNT', array=False, type='int')
    os.system('mce_acq_register %i iv %s %i "%s"' % \
                  (ctime, opts.ramp_file, n_frames, opts.reg_note))

#
#  Analyze the IV curve?
#
if do_stage('analyze'):
    iva_opts = ''
    if opts.do_plots == 0:
        # Do not produce any plots.
        iva_opts += ' --plot-dir=none'
    if opts.analysis_file == None:
        opts.analysis_file = opts.ramp_file + '.out'
    if opts.do_analysis == 0:
        # Do not regenerate .out analysis file.
        iva_opts += ' --rf-file=none'
    else:
        iva_opts += ' --rf-file=%s' % opts.analysis_file
    err = os.system('python %s/iv_analysis.py %s' % 
              (mas_path.python_dir(), opts.ramp_file) +
                    iva_opts)
    if err != 0:
        printe('analysis stage failed [%i], exiting.' % err)
        o.exit(1)

#
#  Apply the lastest biases?
#
if do_stage('bias'):
    # Accumulate operations in a list.
    cmds = []

    # Drive dets normal before setting bias?
    norm_biases = mas_param(exp_file, 'tes_bias_normal')
    if len(norm_biases) != 0:
        norm_biases = map(int, norm_biases.split())
        norm_time = float(mas_param(exp_file, 'tes_bias_normal_time'))
        cmds.append(('bias', norm_biases, 'Driving detectors normal...'))
        cmds.append(('sleep', norm_time, '... for %.2f s' % norm_time))

    # The last IV biases.
    rf = MCERunfile(opts.analysis_file)
    biases = rf.Item('IV', 'rec_biases', type='int', array=True)
    cmds.append(('bias', biases, 'Setting detector biases.'))

    # Post-delay?
    delay = cfg.getfloat('bias_delay_post', 0)
    if delay > 0:
        cmds.append(('sleep', delay, 'Wait for settling, %.2f s' % delay))

    # Do the biasing.
    for op, vals, msg in cmds:
        print msg
        if op == 'bias':
            cmd = 'bias_tess ' + ' '.join(['%i' % x for x in vals])
            err = os.system(cmd)
            if err != 0:
                printe('biasing stage failed [%i], exiting.' % err)
                o.exit(1)
        elif op == 'sleep':
            time.sleep(vals)
        else:
            raise RuntimeError

    # Link it?  Not if we're using the link as the source analysis...
    if opts.do_link and (true_path(opts.analysis_file) != \
                             true_path(last_iv_link)):
        link_exists = True
        if not os.path.exists(last_iv_link): # could be a broken link...
            try:
                os.readlink(last_iv_link)
            except OSError:
                link_exists = False
        if link_exists:
            os.remove(last_iv_link)
        os.symlink(true_path(opts.analysis_file), last_iv_link)

alog.stop_msg()

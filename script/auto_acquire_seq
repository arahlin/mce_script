#!/bin/bash

## source ~mce/mas_env.bash
source $MAS_SCRIPT/mas_library.bash

AUTO_LOG=$MAS_DATA/auto_log.txt
LOGGER="tee -a $AUTO_LOG"

SCRNAME="auto_acquire"
ERRPREF="ERROR : $SCRNAME :"

#SCRIPTS=`cat /home/mce/mce_config/mce_usrscriptdir.cfg`

start_time=`date`
start_ctime=`print_ctime`

echo "START : $SCRNAME : $start_time" | $LOGGER
echo "ARGS  : $SCRNAME : $@" | $LOGGER

#Process arguments

if [ $# -lt 2 ]; then
    echo "Usage:     auto_acquire <filename> <n_frames> [<log_id>]"
    echo $ERRPREF "wrong number of arguments" | $LOGGER
    exit 1
fi

acq_name=${start_ctime}_$1
n_frames=$2
note="$3"

# Set file-sequencing block size and launch file monitor
BLOCK_SIZE=240000
python ${MAS_PYTHON}/clone_sequence.py \
    --block-size $BLOCK_SIZE --note "$note" --suffix "$1" \
    --output-dir $MAS_DATA \
    $MAS_DATA/$acq_name $n_frames &

# DSP reset to repair any PCI faults
mce_cmd -qX "dsp_reset" -X "sleep 2000"

# Do not register acquisition, it is done by clone_sequence.
update_userword s
##acq_register $start_ctime auto $MAS_DATA/$acq_name $n_frames "$note"

# args are file_prefix, frame count, card (1,2,3,4,s) sequence_frame_count
NICECMD='nice -10'
ACQ="$NICECMD mce_run_sequence $acq_name $n_frames s $BLOCK_SIZE"
ACQ_TARGET=0

# Start acquisition
$ACQ
if [ "$?" != "$ACQ_TARGET" ]; then
    echo $ERRPREF "'$ACQ' returned error!" | $LOGGER
    exit 1
fi

# Record keeping: PCI diagnostic and time elapsed

# diag=`print_dsp_diagnostic`
# echo "INFO  : $SCRNAME : $diag" | $LOGGER
delta_ctime=`print_elapsed $start_ctime`
echo "STOP  : $SCRNAME : time elapsed = $delta_ctime" | $LOGGER
echo

#!/bin/bash 
#
# Acquires bias-step data, using MCE internal commanding.
#
# Uses bc# mod_val -- make sure your firmware supports this.
#

#initialise environment
if [ ! -x ${MAS_VAR:=/usr/mce/bin/mas_var} ]; then
  echo "Cannot find mas_var.  Set MAS_VAR to the full path to the mas_var binary." >&2
  exit 1
else
  eval $(${MAS_VAR} -s)
fi

source $MAS_SCRIPT/mas_library.bash

case $1 in
    1|2|3)
	bc=$1
	;;
    *)
	bc=
esac

n_points=10000
step_depth=50
step_period=1003200

if [ "$bc" == "" ]; then
    echo "----------------------------------------"
    echo "Usage: $0 bc [ n_frames depth time ]"
    echo "where:        bc             is the bias card to target (1,2 or 3)"
    echo "              n_frames       is the number of data points to acquire (default $n_points)"
    echo "              depth          is the amplitude of the bias stepping (default $step_depth)"
    echo "              time           is the dwell time (in us) on each bias value (default $step_period)"
    echo " Last 3 arguments are optional, pass \"\" as a place-holder."
    echo
    echo "This script uses internal MCE ramping to produce a square wave on the " \
	"TES (or heater) bias lines.  The maximum and minimum square wave values are calculated " \
	"as [ current bias +/- (depth/2) ]."
    echo ""
    echo "To pass an observing log id to the registration program, set the variable "
    echo "      export MAS_LOGID='observinglog.id=xxxx'"
    echo "----------------------------------------"
    exit 1
fi

# Cheap argument processing...
[ "$2" != "" ] && n_points=$3
[ "$3" != "" ] && step_depth=$4
[ "$4" != "" ] && step_period=$5


# Zero mod_val and set the mod_val targets:
mce_cmd -qx wb bc$bc mod_val 0
mce_set_mod_targets tes bias --select bc$bc bias

# The card and parameter to step can, in principal be extracted from
# mce_status -g output.  For now, we hard code them :O
# Card id's will be 7,8,9 for bc1,2,3.  "mod_val" param is 0x27
bias_card=$(( $bc + 6 ))
bias_para=0x27

ct=`print_ctime`
filename="${ct}_bc$(( $line + 1 ))_step"

acq_register $ct bias_step $MAS_DATA/$filename $n_points "$MAS_LOGID"

# Process timing info
last_data_mode=( `command_reply rb rca data_mode` )
data_rate=`command_reply rb cc data_rate`
num_rows=`command_reply rb cc num_rows`
row_len=`command_reply rb cc row_len`

frame_rate=$(( 50000000 / $num_rows / $row_len ))
echo "Internal frame rate is currently $frame_rate Hz"

step_period=$(( $frame_rate * $step_period / 1000000 ))

# Round to multiple of data_rate
step_period=$(( ($step_period + $data_rate/2) / $data_rate * $data_rate ))

echo Step period will be $step_period frames

centre_bias=0
half_step=$(( $step_depth / 2 ))
#if [ "$centre_bias" -lt "$half_step" ]; then
#    echo "Current bias value is less than half of the step value, aborting."
#    exit 1
#fi

#bias_lo=$(( $centre_bias - $half_step ))
#bias_hi=$(( $centre_bias + $half_step ))

bias_lo=0
bias_hi=$step_depth

# Disable MCE internal commanding
mce_cmd -qx wb cc internal_cmd_mode 0

# Set mod_val ramp parameters

mce_cmd -qx wb cc ramp_param_id  $bias_para
mce_cmd -qx wb cc ramp_card_addr $bias_card

mce_cmd -qx wb cc ramp_step_period $step_period
mce_cmd -qx wb cc ramp_min_val     $bias_lo
mce_cmd -qx wb cc ramp_max_val     $bias_hi
mce_cmd -qx wb cc ramp_step_size   $step_depth

# ramp_step_data_num is the number of data to issue per ramp step command
# 1 is right for mod_val.
mce_cmd -qx wb cc ramp_step_data_num 1

# Use data mode 1, unfiltered 32-bit feedback
mce_cmd -qx wb rca data_mode 1

# Enable the ramp and acquire
mce_cmd -qx wb cc internal_cmd_mode 2

#update_userword s
mce_run $filename $n_points s

# Disable ramp, write mod_val to 0 to restore bias.
mce_cmd -qx wb cc internal_cmd_mode 0
mce_cmd -qx sleep 50000
mce_cmd -qx wb bc$bc mod_val 0

# Restore data_mode
mce_cmd -qx wb rca data_mode ${last_data_mode[0]}

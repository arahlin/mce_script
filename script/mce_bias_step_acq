#!/usr/bin/env python

USAGE="""
%prog [options]

Acquire bias or heater step data, using MCE internal commanding.

This script uses internal MCE ramping to produce a square wave on the
TES (or heater) bias lines.  It will cause the bias to step between

      [ current bias ] and [ current bias + depth ]

To pass an observing log id to the registration program, you can use
the MAS_LOGID environment variable or pass --reg-note=xxxx.

Ramp parameters are specified in a config file (probably
$MAS_CONFIG/bias_step.cfg), but all settings can be overridden from
the command line.
"""

from mce_control import mce_control as MCE
import os
import time

from auto_setup.util import mas_path
mas_path = mas_path()

from ConfigParser import SafeConfigParser
from optparse import OptionParser

simple_delist = lambda x: x.split()

class SmarterConfig(SafeConfigParser):
    # This actually isn't that much smarter.
    def __init__(self, filename=None):
        SafeConfigParser.__init__(self)
        if filename != None:
            self.read(filename)
    def get_type(self, type_caster, section, key, default=None):
        if self.has_section(section) and self.has_option(section, key):
            return type_caster(self.get(section, key))
        if default != None:
            return default
        raise ValueError, 'Unknown config parameter %s:%s' % \
            (section, key)
    def getfloat(self, section, key, default=None):
        return self.get_type(float, section, key, default)
    def getint(self, section, key, default=None):
        return self.get_type(int, section, key, default)
    def getstr(self, section, key, default=None):
        return self.get_type(str, section, key, default)
    def getlist(self, section, key, default=None):
        return self.get_type(simple_delist, section, key, default)


o = OptionParser(usage=USAGE)
o.add_option('--filename',help=
             "Filename. If multiple bias cards will be "\
                 "used, the filename must contain one of '%(bias_card)s' or "\
                 "'%(ctime)s', which will be expanded to the bias card name "\
                 "or a ctime so that the output filenames will be unique.")
o.add_option('--bc', action='append', help=
             "Specify a bias card.  Can be passed multiple times, to select "\
                 "multiple cards.  If this is not passed, the step will be "\
                 "run on all bias cards which contribute to the target "\
                 "register.")
             
o.add_option('--depth', type=int, help=
             "Depth of the step, in DAC units.")
o.add_option('--dwell', type=float, help=
             "Dwell time of each level, in seconds.")
o.add_option('--frames', type=int, help=
             "Number of frames to acquire.")
o.add_option('--reg-note', help=
             "Data to pass to acquisition register.")
o.add_option('--register', type=int, help=
             "Set to 1 or 0 depending on whether you want to call mce_acq_register.")
o.add_option('--readout-rounding', type=int, default=None, help=
             "Specify whether the stepping rate should be rounded to be an "
             "even multiple of the readout rate.")
o.add_option('--data-mode', type=int, default=1, help=
             "Specify data_mode.  Defaults to 1 (unfiltered feedback only). "\
                 "The original data_mode will be restored on exit.")
o.add_option('--config-file', help=
             "Specify config file from which to get defaults.")
o.add_option('--array-id', help=
             "Specify config file from which to get defaults.")

opts, args = o.parse_args()

# Load config file?
explicit_config_file = (opts.config_file != None)
if not explicit_config_file:
    opts.config_file = os.path.join(mas_path.config_dir(), 'bias_step.cfg')

cfg = SmarterConfig()
if os.path.exists(opts.config_file):
    cfg.read(opts.config_file)
    array_file = os.path.join(mas_path.data_root(), 'array_id')
    if opts.array_id == None:
        if os.path.exists(array_file):
            opts.array_id = open(array_file).readline().strip()
        else:
            print 'No array_id file, using array_id="default"'
            opts.array_id = 'default'
else:
    print 'Did not find config file "%s"' % opts.config_file
    if explicit_config_file:
        # Deal breaker
        raise RuntimeError
    opts.array_id = 'default'

# Check and convert options.
if opts.bc == None:
    opts.bc = cfg.getlist(opts.array_id, 'cards', ['bc1','bc2','bc3'])

if opts.filename == None:
    opts.filename = cfg.getstr(opts.array_id, 'filename',
                               '%(ctime0)s_%(bias_card)s_step')
    custom_filename = False
else:
    custom_filename = True

## We're not ready for this yet...
#if not '/' in opts.filename:
#    # Prepend $MAS_DATA
#    opts.filename = mas_path.data_dir() + '/' + opts.filename

if len(opts.bc) > 1:
    if not (('%(ctime)s' in opts.filename) or 
            ('%(bias_card)s' in opts.filename)):
        raise RuntimeError, "Invalid filename for multiple bias card acq."

if opts.depth == None:
    opts.depth = cfg.getint(opts.array_id, 'depth', 50)

if opts.dwell == None:
    opts.dwell = cfg.getfloat(opts.array_id, 'dwell', 0.5)

if opts.frames == None:
    opts.frames = cfg.getint(opts.array_id, 'frames', 2000)

if opts.reg_note == None:
    opts.reg_note = os.getenv('MAS_LOGID', '')

if opts.register == None:
    opts.register = cfg.getint(opts.array_id, 'register', 1)

if opts.readout_rounding == None:
    opts.readout_rounding = cfg.getint(opts.array_id, 'readout_rounding', 1)

if custom_filename and opts.register != 0:
    print 'You have asked for a weird filename, but also for db registration.'
    print 'You need to pick one.  Either use the default file naming, or pass'
    print 'the --no-db option.  (Or submit a feature request...)'
    raise RuntimeError, "Filename/database conflict."


#
# Preparation 
#

mce = MCE()
ctime0 = int(time.time())
data_mode_before = mce.data_mode()

## Get timing and stuff.

readout_rate = mce.readout_rate()
mux_rate = mce.mux_rate()
print 'Internal frame rate is currently %.3f Hz' % mux_rate
print 'Readout rate is %.3f Hz' % readout_rate

dwell_cycles = int(round(opts.dwell * mux_rate))
print 'Requested switching every %i mux cycles' % dwell_cycles
print 'Dwell time is %.4f' % (dwell_cycles / mux_rate)

if opts.readout_rounding:
    data_period = mce.data_rate()
    dwell_cycles = int(round(opts.dwell * readout_rate)) * data_period
    print 'Rounding to %i mux cycles to match data_rate=%i' % \
        (dwell_cycles, data_period)

# Disable MCE internal commanding
mce.write('cc', 'internal_cmd_mode', 0)

# Set everything up except ramp_card_addr
## The card and parameter to step can, in principal be extracted from
## mce_status -g output.  For now, we hard code them :O
## Card id's will be 7,8,9 for bc1,2,3.  "mod_val" param is 0x27

for k, v in [
    #('ramp_card_addr', int(bc[2]) + 6),
    ('ramp_param_id', 0x27),
    ('ramp_step_period', dwell_cycles),
    ('ramp_min_val', 0),
    ('ramp_max_val', opts.depth),
    ('ramp_step_size', opts.depth),
    ('ramp_step_data_num', 1),
    ]:
    mce.write('cc', k, v)

# Probably data mode 1; unfiltered 32-bit feedback
mce.data_mode(opts.data_mode)

#
# Run the ramps on each bc.
# 

for bc in opts.bc:
    this_data = {
        'bias_card': bc,
        'ctime': str(int(time.time())),
        'ctime0': str(ctime0),
        'db_ctime': str(ctime0),
        'n_frames': opts.frames,
        'log': opts.reg_note,
        'data_dir': mas_path.data_dir(),
        }
    this_data['filename'] = opts.filename % this_data

    # Zero mod_val and set the mod_val targets:
    mce.write(bc, 'mod_val', [0])
    os.system('mce_set_mod_targets tes bias --select %s bias' % bc)
    
    # Register the acquisition
    if opts.register != 0:
        os.system('mce_acq_register %(db_ctime)s bias_step %(data_dir)s/%(filename)s '
                  '%(n_frames)i "%(log)s"' %
                  this_data)
    
    mce.write('cc', 'ramp_card_addr', int(bc[2]) + 6)


    # Enable the ramp and acquire
    mce.write('cc', 'internal_cmd_mode', 2)

    # Acquire.
    os.system('mce_run %(filename)s %(n_frames)i s' % this_data)
    
    # Disable ramp, write mod_val to 0 to restore bias.
    time.sleep(.05)
    mce.write('cc', 'internal_cmd_mode', 0)
    time.sleep(.05)
    mce.write(bc, 'mod_val', 0)
    
# Restore data_mode
mce.data_mode(int(data_mode_before))

print 'Finished'


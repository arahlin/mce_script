#!/bin/bash
#
# Adapted from ramp_tes_bias for DAS
#

source $MAS_SCRIPT/mas_library.bash

if [ "$#" -lt "2" ]; then
  echo "----------------"
  echo "Usage: ramp_tes_bias datafile n [ bias_start bias_step bias_count bias_pause first_pause [ normal_bias normal_time ] ] "
  echo "   datafile      is the name of the datafile"
  echo "   n             is the rc card number (1 to 4)"
  echo
  echo "   bias_start    is the first bias to apply"
  echo "   bias_step     is the change in bias in each step (you probably want a *negative* value here)"
  echo "   bias_count    is the total number of biases to apply"
  echo "   bias_pause    is the delay time (in seconds) between biases"
  echo "   first_pause   is the stabilization delay (in seconds) after applying the first bias"
  echo
  echo "   normal_bias   is the bias applied just prior to beginning the ramp"
  echo "   normal_time   is the number of seconds to apply the normal bias (if 0, no normal bias is applied)"
  echo
  echo "At the end of the script, the biases are returned to the values they had when the script was called."
  echo "Note that the file will be saved under the data directory."
  echo "----------------"
  exit 1
fi

# Set default bias step and normalizing parameters
total_bias=200
bias_step=-300
start_bias=60000
bias_normal=65535
normal_time=0.1
first_pause=10
data_pause_us=100000    # step period in microseconds 

# Command line overrides
if [ "$#" -gt "2" ]; then
    start_bias=$3
    bias_step=$4
    total_bias=$5
    data_pause_us=`float_multiply 1000000.0 $6`
    if [ "$data_pause_us" == "" ]; then data_pause_us="0"; fi
    first_pause=$7
fi

if [ "$#" -gt "7" ]; then
    bias_normal=$8
    normal_time=$9
fi

ct=`print_ctime`
dt=`cat /data/cryo/current_data_name`

data_root=$1
n=$2
datafile=$MAS_DATA/$data_root

runfile=$datafile.run
biasfile=$datafile.bias
logfile=$datafile.log

if [ "$normal_time" != "0" ]; then
    echo "Driving detectors normal (bias = $bias_normal)"
    bias_tess $bias_normal
    sleep $normal_time
    bias_tess 0
    sleep $normal_time
    bias_tess $bias_normal
    sleep $normal_time
fi

echo "Setting first bias and waiting $first_pause s; time between other points will be $data_pause_us us"
bias_tess $start_bias
sleep $first_pause

cat /data/cryo/last_squid_tune >> $runfile

#Generate .run file
mce_status >> $runfile

# Apply frameacq stamp
frameacq_stamp $n $datafile $total_bias >> $runfile
if [ "$?" != "0" ]; then
  echo "frameacq_stamp failed!"
  exit 1
fi

# Put temp(erature) block in runfile
temperature_block >> $runfile

# Remove existing biasfile
[ -e $biasfile ] && rm $biasfile

echo "<tes_bias>" >> $biasfile
echo "Acquiring I-V curve into data file $datafile"

#touch /data/cryo/${dt}/$datafile
#ln /data/cryo/${dt}/$datafile /data/mce_ctimes/$datafile
#ln /data/cryo/${dt}/$runfile /data/mce_ctimes/$runfile
#ln /data/cryo/${dt}/$biasfile /data/mce_ctimes/$biasfile

script=$MAS_TEMP/ramp_tes_bias.scr
[ -e $script ] && rm $script

for i in `seq 0 $(( $total_bias - 1 ))`; do
   bias=$(( $start_bias + $i * $bias_step ))
   echo "wb tes bias $bias"
   echo "acq_config $datafile rc$n"
   echo "acq_go 1"
   if [ "$data_pause_us" -gt "0" ]; then
       echo "sleep $data_pause_us"
   fi
done > $script

mce_cmd -qf $script

my_data=/data/cryo

echo "Completed I-V acquisition!"

if [ "$normal_time" != "0" ]; then
    echo "Driving detectors normal (bias=$normal_bias)"
    bias_tess $bias_normal
    sleep $normal_time
    bias_tess 0
    sleep $normal_time
    bias_tess $bias_normal
    sleep $normal_time
fi

echo "Setting biases to initial value of $end_bias"
bias_tess $end_bias

echo "IV run time: " `print_elapsed $ct` "s"

last_iv=$my_data/last_iv_completed
[ -h $last_iv ] && rm -f $last_iv
ln -s $datafile $last_iv

echo "$datafile" > $my_data/last_iv_completed_name

#!/bin/bash
#
# Adapted from ramp_tes_bias for DAS
#

#initialise environment
if [ ! -x ${MAS_VAR:=/usr/mce/bin/mas_var} ]; then
  echo "Cannot find mas_var.  Set MAS_VAR to the full path to the mas_var binary." >&2
  exit 1
else
  eval $(${MAS_VAR} -s)
fi

source $MAS_SCRIPT/mas_library.bash

# Set default bias step and normalizing parameters
expt_file=$MAS_DATA/experiment.cfg
total_bias=`mas_param -s $expt_file get ramp_tes_count`
bias_step=`mas_param -s $expt_file get ramp_tes_step`
start_bias=`mas_param -s $expt_file get ramp_tes_start`
bias_normal=`mas_param -s $expt_file get tes_bias_normal`
normal_time=`mas_param -s $expt_file get tes_bias_normal_time`
first_pause=`mas_param -s $expt_file get ramp_tes_initial_pause`
end_bias=`mas_param -s $expt_file get ramp_tes_final_bias`
data_pause_us=`mas_param -s $expt_file get ramp_tes_period_us`

if [ "$#" -lt "2" ] || [ "$#" -gt "2" -a "$#" -lt "7" ]; then
  echo "----------------"
  echo "Usage:"
  echo "  ramp_tes_bias datafile n [ bias_start bias_step bias_count bias_pause"
  echo "                first_pause [ normal_bias [ normal_time [ end_bias ] ] ] ]"
  echo
  echo "where:"
  echo
  echo "   datafile      is the name of the datafile"
  echo "   n             is the rc card number (1 to 4)"
  echo
  echo "   bias_start    is the first bias to apply [default: $start_bias]"
  echo "   bias_step     is the change in bias in each step (you probably want a"
  echo "                        *negative* value here) [default: $bias_step]"
  echo "   bias_count    is the total number of biases to apply [default: $total_bias]"
  data_pause_s=`printf %07i $data_pause_us | sed -e 's/\(.*\)\(......\)/\1.\2/'`
  echo "   bias_pause    is the delay time (in seconds) between biases [default:"
  echo "                        $data_pause_s]"
  echo "   first_pause   is the stabilization delay (in seconds) after applying the "
  echo "                        first bias [default: $first_pause]"
  echo
  echo "   normal_bias   is the bias applied just prior to beginning the ramp"
  echo "                        [default: $bias_normal]"
  echo "   normal_time   is the number of seconds to apply the normal bias (if 0,"
  echo "                        no normal bias is applied) [default: $normal_time]"
  echo "   end_bias      is the bias level to reset to after running the ramp"
  echo "                        [default: $end_bias]"
  echo
  echo "The defaults above are extracted from $expt_file."
  echo "Note that the file will be saved under the data directory."
  echo ""
  echo "To pass an observing log id to the registration program, set the variable "
  echo "      export MAS_LOGID='observinglog.id=xxxx'"
  echo "----------------"
  exit 1
fi

data_root=$1
n=$2
shift 2

# Command line overrides
if [ "$#" -gt "0" ]; then
    start_bias=$1
    bias_step=$2
    total_bias=$3
    data_pause_us=`float_multiply 1000000.0 $4`
    if [ "$data_pause_us" == "" ]; then data_pause_us="0"; fi
    first_pause=$5
    shift 5
fi

if [ "$#" -gt "0" ]; then
    bias_normal=$1
    shift
fi
if [ "$#" -gt "0" ]; then
    normal_time=$1
    shift
fi
if [ "$#" -gt "0" ]; then
    end_bias=$1
    shift
fi

ct=`print_ctime`
dt=$(cat ${MAS_DATA_ROOT}/current_data_name)

datafile=$MAS_DATA/$data_root

runfile=$datafile.run
biasfile=$datafile.bias
logfile=$datafile.log

if [ -e "$datafile" ]; then
    echo "Target data file $datafile exists, aborting."
    exit 1
fi

if [ "$normal_time" != "0" ]; then
    echo "Driving detectors normal (bias = $bias_normal)"
    bias_tess $bias_normal
    sleep $normal_time
    bias_tess 0
    sleep $normal_time
    bias_tess $bias_normal
    sleep $normal_time
fi

echo "Setting first bias and waiting $first_pause s; time between other points will be $data_pause_us us"
bias_tess $start_bias
sleep $first_pause

# Help data mode into frame header...
mce_update_userword $n

# Don't register the acq here, it's done in auto_iv or not at all.
#acq_register $ct iv $datafile $total_bias "$MAS_LOGID"

#Generate .run file
mce_status >> $runfile

# Apply frameacq stamp
frameacq_stamp $n $datafile $total_bias >> $runfile
if [ "$?" != "0" ]; then
  echo "frameacq_stamp failed!"
  exit 1
fi

echo "<tes_bias>" >> $biasfile
echo "Acquiring I-V curve into data file $datafile"

script=$MAS_TEMP/`whoami`_ramp_tes_bias$MAS_MCE_DEV.scr
[ -e $script ] && rm $script

# Get a count of the bias lines in the system
bias_lines=`command_reply rb tes bias | wc -w`

if [ "$data_pause_us" -gt "0" ]; then
    sleep_arg="-P 'sleep $data_pause_us' 0"
else
    sleep_arg=""
fi

# This doesn't work, probably because mce_ramp chokes on negative values.
# echo mce_ramp -M "acq_config $datafile rc$n" \
#     -L $total_bias \
#     -V $start_bias $bias_step \
#     -P "wb tes bias" $bias_lines \
#     -P "acq_go 1" 0 \
#     $sleep_arg
# mce_ramp -M "acq_config $datafile rc$n" \
#     -L $total_bias \
#     -V $start_bias $bias_step \
#     -P "wb tes bias" $bias_lines \
#     -P "acq_go 1" 0 \
#     $sleep_arg > $script
# exit

echo "acq_config $datafile rc$n" > $script
for i in `seq 0 $(( $total_bias - 1 ))`; do
   bias=$(( $start_bias + $i * $bias_step ))
   echo $bias >> $biasfile
   repeat_string $bias $bias_lines "wb tes bias"
   if [ "$data_pause_us" -gt "0" ]; then
       echo "sleep $data_pause_us"
   fi
   echo "acq_go 1"
done >> $script

mce_cmd -qf $script

my_data=${MAS_DATA_ROOT}

echo "Completed I-V acquisition!"

if [ "$normal_time" != "0" ]; then
    echo "Driving detectors normal (bias=$normal_bias)"
    bias_tess $bias_normal
    sleep $normal_time
    bias_tess 0
    sleep $normal_time
    bias_tess $bias_normal
    sleep $normal_time
fi

echo "Resetting biases to default value of $end_bias"
bias_tess $end_bias

echo "IV run time: " `print_elapsed $ct` "s"

last_iv=$my_data/last_iv_completed
[ -h $last_iv ] && rm -f $last_iv
ln -s $datafile $last_iv

echo "$datafile" > $my_data/last_iv_completed_name

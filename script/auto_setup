#!/usr/bin/env python
# vi: ts=4:sw=4:et

import auto_setup as ast
import mce_auto_assist as maa

from auto_setup.util.mas_path import mas_path
mas_path = mas_path()

import os
import subprocess
from optparse import OptionParser

stage_list = ['sa_ramp', 'sq2_servo', 'sq1_servo', 'sq1_ramp',
              'sq1_ramp_tes', 'operate',
              'rs_servo', 'sq1_servo_sa']


o = OptionParser(usage="""
%prog [options]

Runs the python auto-setup.  To tune only particular readout cards,
use the --rc=RC option.  To tune only certain squid stages of an
array, use --first-stage and --last-stage.  Valid arguments to
--*-stage options are:

   """ + ' '.join(stage_list) + """

The auto-setup gets most of its configuration instructions from
experiment.cfg.
""")
o.add_option('--rc', action='append', default=[],help=
             "Select RC for tuning (e.g. 2, or s). Pass multiple " \
                 "times to tune multiple cards.  Default is s.")

o.add_option('-d', '--debug', action='store_true', help=
             "Run in debug mode.")

o.add_option('-i', '--interactive', action='store_true',help=
             "Drop to pdb shell on error.  Useful for debugging.")

o.add_option('--first-stage', default=None,help=
             "select squid stage at which to begin tuning (i.e. skips "\
                 "preceding tuning steps)")

o.add_option('--last-stage', default=None,help=
             "select squid stage after which to stop tuning")

o.add_option('-s', '--shortness', default=0, type='int', help=
             "legacy... pass integer [0, 1, 2] to get equivalent of "\
                 "--first-stage [sa_bias, sq1_servo, sq1_ramp]")

o.add_option('--check-bias', action='store_true', dest='check_bias', help=
             "force checking of SA and SQ2 bias")

o.add_option('--no-check-bias', action='store_false', dest='check_bias', help=
             "force no checking of SA and SQ2 bias")

o.add_option('--set-directory', default=1, type='int',
             help='pass 1 or 0 depending on whether you want to run '
             'set_directory before tuning')

o.add_option('--reg-note', default=None)
o.add_option('--auto-log', default=None)

opts, args = o.parse_args()

default_config_file = os.path.join(mas_path.config_dir(), 'mce_auto.cfg')
cfg = maa.DefaultingConfig(default_config_file)

cfg.active_section = 'auto_setup'
cfg.default_section = 'default'
if opts.auto_log == None:
    opts.auto_log = cfg.getstr('auto_log', '').strip()
    if opts.auto_log == '':
        opts.auto_log = None

if opts.auto_log == None and opts.reg_note == None:
    opts.auto_log = '/dev/null'

alog = maa.AutoLogger(opts.auto_log, 'auto_setup')
alog.start_msg()

# Process...
if opts.interactive:
    ast.util.interactive_errors()

# opts.rc should be integers or 's' for all.
opts.rc = [x.lower() for x in opts.rc]
if (len(opts.rc) == 0) or ('s' in opts.rc):
    opts.rc = None
else:
    opts.rc = [int(x) for x in opts.rc]

# Tune.
try:
    # set_directory?
    if opts.set_directory:
        if subprocess.call(['set_directory']) != 0:
            print "set_directory failed!"
            alog.write('set_directory failed', 'ERROR')
            sys.exit(1)

    ast.auto_setup(rcs=opts.rc, short=opts.shortness, reg_note=opts.reg_note,
                   first_stage=opts.first_stage, last_stage=opts.last_stage,
                   check_bias=opts.check_bias, debug=opts.debug)
except:
    alog.write('exception in ast.auto_setup', 'ERROR')
    raise

alog.stop_msg()

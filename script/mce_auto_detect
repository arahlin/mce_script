#!/bin/bash

#initialise environment
if [ ! -x ${MAS_VAR:=/usr/mce/bin/mas_var} ]; then
  echo "Cannot find mas_var.  Set MAS_VAR to the full path to the mas_var binary." >&2
  exit 1
else
  eval $(${MAS_VAR} -s)
fi

source $MAS_SCRIPT/mas_library.bash

function is_present {
    # Attempt to change LED status to confirm presence of working card
    card=$1
    led1=`command_reply rb $card $LED 1`
    [ "$?" != "0" ] && return 1
    command_reply wb $card $LED 0x7
    led2=`command_reply rb $card $LED 1`
    OK=$(( $led1 ^ $led2 ))
    command_reply wb $card $LED 0x7
    test "$OK" -ne "0"
}

CARD_ID=0x93
CARD_TYPE=0x94
SLOT_ID=0x95
LED=0x99

echo "mce_scan version 1"
echo "card_scan"
echo "#   card  card_id    card_type  pcb_rev    slot_id"
for i in `seq 1 10`; do
    is_present $i || continue
    printf "%7i " $i
    for k in $CARD_ID $CARD_TYPE $SLOT_ID; do
        # $i = 1 corresponds to psc, 2 to cc, 3 to rc2, 4 to rc1, 4 to rc1, 4 to rc1, 4 to rc1, etc
	a=`command_reply rb $i $k 1`
        case  "$k" in 
        $CARD_ID) 
          printf "%#9x " $a
        ;;
        $CARD_TYPE)
          for j in $a ; do
            printf "%9i " `expr $j % 256` #card_type
            printf "%9i " `expr $j / 256` #pcb_rev
          done
        ;;
        $SLOT_ID)
          printf "%9i " $a
        ;;
        esac
    done
    echo
done

echo "jtag_scan"
echo "# id device"
mce_jam -u -v -f8000000 -aread_idcode $MAS_TEMPLATE/read_idcode.jam | \
    grep EP | sed 's/.*Device\ #/\ \ /g; s/\ *|\ */\ /g; s/\ *Altera.*//g' | \
    sed 's/^\(\ [0-9]\ \)/\ \1/g'

#!/bin/bash 
#
# Ramp the SA feedback and, if desired, the SA bias for a readout card.
# Ramp parameters are obtained from experiment.cfg.
#

#Functions!

function float_multiply {
    # Is there a better way to do floating point calcs in bash?
    echo "$1 * $2 + 0.5" | bc | sed 's/\..*//g'
}

function runfile_loop_structure {
#   Variables of environment are inherited
#   par2 is the outer loop
    echo "<par_ramp>" 
    if [ $do_bias_ramp -eq 0 ] ; then
	echo "  <loop_list> loop1"
	echo "    <par_list loop1> par1"
	echo "      <par_title loop1 par1> sa_fb"
	echo "      <par_step loop1 par1> 0 $ramp_step $ramp_count"
    else
	echo "  <loop_list> loop1 loop2"
	echo "    <par_list loop1> par1 par2"
	echo "       <par_title loop1 par1> sa_bias"
	echo "       <par_step loop1 par1> $bias_start $bias_step $bias_count"
	echo "       <par_title loop1 par2> offset"
	echo "       <par_step loop1 par2> $offset_start $offset_step $bias_count"
	echo "    <par_list loop2> par1" 
	echo "       <par_title loop2 par1> sa_fb"
	echo "       <par_step loop2 par1> 0 $ramp_step $ramp_count"
    fi
    echo "</par_ramp>"
    echo ""
}

#
# START OF MAIN ROUTINE
#

#initialise environment
if [ ! -x ${MAS_VAR:=/usr/mce/bin/mas_var} ]; then
  echo "Cannot find mas_var.  Set MAS_VAR to the full path to the mas_var binary." >&2
  exit 1
else
  eval $(${MAS_VAR} -s)
fi

source ${MAS_SCRIPT}/mas_library.bash

if [ $# -lt 3 ]; then 
  echo "----------------" >&2
  echo "Usage: ramp_sa_fb datafile n d [offset_bias_ratio]" >&2
  echo "where : datafile is the name of the datafile" >&2
  echo "        n        is the rc card number (1 to 4 or s for all)" >&2
  echo "        d        is 0 for sweeping sa_fb only and 1 for sweeping sa_fb and sa_bias/offset" >&2
  echo "Note that the file will be saved under the data directory." >&2
  echo "----------------" >&2
  exit 1
fi  

# Arguments

datafile=$MAS_DATA/$1
runfile=${datafile}.run
rc=$2
do_bias_ramp=$3

start_ctime=`print_ctime`
tempfile=$MAS_TEMP/`whoami`__ramp_sa_fb$MAS_MCE_DEV.temp
script_name=$0

# Load parameters

expcfg="$MAS_DATA/experiment.cfg"

# The cable offset to SA bias ratio
cable_offset_sa_bias_ratio=`mas_param -s $expcfg get sa_offset_bias_ratio`

# Delays between setting bias/feedback and reading a frame, in microsecs.
settling_delay_us=10000
[ "$settling_delay_us" == "" ] && settling_delay_us=1


# Ramp parameters: should cover the 64k DAC range
ramp_start=`mas_param -s $expcfg get sa_ramp_flux_start`
ramp_count=`mas_param -s $expcfg get sa_ramp_flux_count`
ramp_step=`mas_param -s $expcfg get sa_ramp_flux_step`

if [ $do_bias_ramp -eq 0 ] ; then
    bias_start=0
    bias_count=1 
    bias_step=0
else
    bias_start=`mas_param -s $expcfg get sa_ramp_bias_start`
    bias_count=`mas_param -s $expcfg get sa_ramp_bias_count`
    bias_step=`mas_param -s $expcfg get sa_ramp_bias_step`

    # Offset is a multiple of the bias
    offset_step=`float_multiply $bias_step $cable_offset_sa_bias_ratio`
    offset_start=`float_multiply $bias_start $cable_offset_sa_bias_ratio`
    [ "$offset_start" == "" ] && offset_start=0

fi

echo count=$ramp_count step=$ramp_step ratio=$cable_offset_sa_bias_ratio

if [ $rc == "s" ] ;then
  col_count=32
  col_index=0
else
  col_count=8
  col_index=$(( $(( $rc - 1 )) * 8))
fi

########################
# now create runfile
mce_status -f $runfile
if [ $? -ne 0 ] ; then
  echo "FAILURE ($script_name: mce_status failed)" >&2
  exit 5
fi 

runfile_loop_structure >> $runfile

total_frames=$(( $bias_count * $ramp_count ))
frameacq_stamp $rc $datafile $total_frames >> $runfile
if [ "$?" != "0" ] ; then
  echo "FAILURE: ($script_name: frameacq_stamp failed)" >&2
  exit 5
fi
#########################

echo "Now running a sweep of sa_fb (0 to $ramp_count*$ramp_step) for each of $bias_count bias value(s)"
#########################
# now create mcebatch file to run 

if [ -e $tempfile ]; then
    /bin/rm $tempfile
fi

if [ $do_bias_ramp -eq 0 ]; then

    repeat_string "0" $col_count "wra sa fb $col_index" >> $tempfile
    echo "sleep $settling_delay_us" >> $tempfile

    mce_ramp -M "acq_config $datafile rc$rc" \
	-L $ramp_count  -V 0 $ramp_step \
	    -P "wra sa fb $col_index" $col_count \
	    -P "sleep $settling_delay_us" 0 \
  	    -P "acq_go 1" 0  >> $tempfile
    
    repeat_string "0" $col_count "wra sa fb $col_index" >> $tempfile

else

    mce_ramp \
	-M "acq_config $datafile rc$rc" \
	-L $bias_count \
	    -V $offset_start $offset_step  -P "wra sa offset $col_index" $col_count \
  	    -V $bias_start   $bias_step    -P "wra sa bias $col_index" $col_count \
	        -L $ramp_count  -V 0 $ramp_step \
             	    -P "wra sa fb $col_index" $col_count \
	            -P "sleep $settling_delay_us" 0 \
	            -P "acq_go 1" 0  >> $tempfile

   repeat_string "0" $col_count "wra sa bias $col_index" >> $tempfile
   repeat_string "0" $col_count "wra sa offset $col_index" >> $tempfile
   repeat_string "0" $col_count "wra sa fb $col_index" >> $tempfile

fi

mce_cmd -q -f $tempfile
if [ $? -ne  0 ] ; then
  echo "FAILURE: ($script_name: mce_cmd failed)"
  exit 4
fi

# run-time is n_steps / 900 Hz.
echo "$0 elapsed time: " `print_elapsed $start_ctime` " s"

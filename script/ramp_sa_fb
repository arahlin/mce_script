#!/bin/bash 
#
# Revision history:
#   Based on scuba2 CVS version 1.13

#Functions, mostly to make for fewer file redirects

function runfile_loop_structure {
#   Variables of environment are inherited
#   par2 is the outer loop
    echo "<par_ramp>" 
    if [ $nested_loop -eq 0 ] ; then
	echo "  <loop_list> loop1"
	echo "    <par_list loop1> par1"
	echo "      <par_title loop1 par1> sa_fb"
	echo "      <par_step loop1 par1> 0 $ramp_step $ramp_count"
    else
	echo "  <loop_list> loop1 loop2"
	echo "    <par_list loop1> par1 par2"
	echo "       <par_title loop1 par1> sa_bias"
	echo "       <par_step loop1 par1> $start_bias $bias_step $total_bias"
	echo "       <par_title loop1 par2> offset"
	echo "       <par_step loop1 par2> $start_bias $bias_step $total_bias"
	echo "    <par_list loop2> par1" 
	echo "       <par_title loop2 par1> sa_fb"
	echo "       <par_step loop2 par1> 0 $ramp_step $ramp_count"
    fi
    echo "</par_ramp>"
    echo ""
}

#
# START OF MAIN ROUTINE
#

# this should set $MAS_DATA and $MAS_TEMP
source ~mce/mas_env.bash
source ${MAS_SCRIPT}mas_library.bash

if [ $# -lt 3 ]; then 
  echo "----------------" >&2
  echo "Usage: ramp_sa_fb datafile n d" >&2
  echo "where : datafile is the name of the datafile" >&2
  echo "        n        is the rc card number (1 to 4 or s for all)" >&2
  echo "        d        is 0 for sweeping sa_fb only and 1 for sweeping sa_fb and sa_bias/offset" >&2
  echo "Note that the file will be saved under the data directory." >&2
  echo "----------------" >&2
  exit 1
fi  

# cable offset to sa_bias ratio
cable_offset_sa_bias_numer=1
cable_offset_sa_bias_denom=2

# Ramp parameters: should cover the 64k DAC range
ramp_count=400
ramp_step=160

start_ctime=`date -u +%s`
tempfile=$MAS_TEMP/ramp_sa_fb.temp
script_name=$0

datafile=$MAS_DATA/$1
runfile=${datafile}.run

n=$2
nested_loop=$3

if [ $n == "s" ] ;then
  num_cols=`mce_param FLUX_FB_COLUMNS`
  col_index=0
else
  num_cols=8
  col_index=$(( $(( $n - 1 )) * 8))
fi
lastcol_index=$(( $col_index + 7))

if [ $nested_loop -eq 0 ] ; then
  total_bias=1 
  bias_step=0
else
  total_bias=25
  bias_step=1500
  start_bias=15000
fi

########################
# now create runfile
mce_status -f $runfile
if [ $? -ne 0 ] ; then
  echo "FAILURE ($script_name: mce_status failed)" >&2
  exit 5
fi 

runfile_loop_structure >> $runfile

total_frames=$(( $total_bias * $ramp_count ))
frameacq_stamp $n $datafile $total_frames >> $runfile
if [ "$?" != "0" ] ; then
  echo "FAILURE: ($script_name: frameacq_stamp failed)" >&2
  exit 5
fi
#########################

echo "Now running a sweep of sa_fb (0 to $ramp_count*$ramp_step) for each of $total_bias bias value(s)"
#########################
# now create mcebatch file to run 

if [ -e $tempfile ]; then
    /bin/rm $tempfile
fi

if [ $nested_loop -eq 0 ]; then
    mce_ramp -M "acq_config $datafile rc$n" \
	-L $ramp_count  -V 0 $ramp_step \
	    -P "wb bc1 flux_fb" 16 \
  	    -P "acq_go 1" 0  >> $tempfile
    
    repeat_string "wb bc1 flux_fb" "0" 16 "" >> $tempfile

else
    offset_step=$(( $bias_step * $cable_offset_sa_bias_numer / $cable_offset_sa_bias_denom ))
    start_offset=$(( $start_bias * $cable_offset_sa_bias_numer / $cable_offset_sa_bias_denom ))

    mce_ramp \
	-M "acq_config $datafile rc$n" \
	-L $total_bias \
	    -V $start_offset $offset_step  -P "wb rc$n offset " 8 \
  	    -V $start_bias   $bias_step    -P "wb rc$n sa_bias " 8 \
	        -L $ramp_count  -V 0 $ramp_step \
             	    -P "wb bc1 flux_fb" 16 \
	            -P "acq_go 1" 0  >> $tempfile

   repeat_string "wb rc$n sa_bias" "0" 8 "" >> $tempfile
   repeat_string "wb rc$n offset" "0" 8 ""  >> $tempfile
   repeat_string "wb bc1 flux_fb" "0" 16 "" >> $tempfile

fi

echo "$0 file-write time: " `print_elapsed $start_ctime` " s"

mce_cmd -q -f $tempfile
if [ $? -ne  0 ] ; then
  echo "FAILURE: ($script_name: mce_cmd failed)"
  exit 4
fi

echo "$0 elapsed time: " `print_elapsed $start_ctime` " s"

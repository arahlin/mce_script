#
# Template for MCE config settings file
#

## This file contains a variety of information, including hardware
## presence/absence, a description of the experiments default run
## parameters, and a set of variables that are updated by the
## auto-tuning program.  This ultimately becomes the source data for
## mce_make_config, which produces a bash script that puts the MCE in
## a desired state.

## To read from or write to the parameters in this file, use the
## mas_param program.  If you want to access this data from IDL,
## mas_param can create a set of functions that facilitate this.

## These comments are only present in the template version of the
## config file.  Once the file has been modified by an automatic
## agent, comments and formatting are stripped.


#Array ID corresponding to this configuration file.  This can used for
#looking up additional configuration.

array_id = "keck0";

#
#
# Section 1: file structure parameters
#
#

array_width = 41;   #Internal specification of how many rows our 2d arrays hold


#
#
# Section 2: hardware description
#
#

## Indicate presence of each readout card, sync box, biasing address card.
hardware_rc = [ 1, 1, 0, 0 ];
hardware_sync = 0;
hardware_bac = 1;
hardware_rect = 1;

## Select readout cards that should report data on RCS acqs.
hardware_rc_data = [ 1, 1, 0, 0 ];

## Sync box rule for config_sb==0
sb0_select_clk = 0;
sb0_use_dv     = 0;
sb0_use_sync   = 0;

## Sync box rule for config_sb==1
sb1_select_clk = 1;
sb1_use_dv     = 2;
sb1_use_sync   = 2;


#
#
# Section 3: default/typical parameters
#
#

## Row count, integration count, final data mode and servo values

default_num_rows = 33;
default_sample_num = 10;
default_data_mode = 10;
default_flux_jumping = 0;

default_servo_p        =  [  0,  0,  0,  0,  0,  0,  0,  0,
			     0,  0,  0,  0,  0,  0,  0,  0,
			     0,  0,  0,  0,  0,  0,  0,  0,
			     0,  0,  0,  0,  0,  0,  0,  0 ];
default_servo_i        =  [ 20, 20, 20, 20, 20, 20, 20, 20,
			    20, 20, 20, 20, 20, 20, 20, 20,
			    0, 0, 0, 0, 0, 0, 0, 0,
			    0, 0, 0, 0, 0, 0, 0, 0 ];
default_servo_d        =  [  0,  0,  0,  0,  0,  0,  0,  0,
			     0,  0,  0,  0,  0,  0,  0,  0,
			     0,  0,  0,  0,  0,  0,  0,  0,
			     0,  0,  0,  0,  0,  0,  0,  0 ];

## Default SA bias values (in case SA bias is not being ramped)

default_sa_bias     = [ 37500, 39000, 36000, 36000, 36000, 36000, 36000, 36000, 
		        45000, 43500, 43500, 42000, 45000, 40500, 40500, 42000, 
			0, 0, 0, 0, 0, 0, 0, 0, 
			0, 0, 0, 0, 0, 0, 0, 0 ];

## Default sq2 bias values

default_sq2_bias    = [ 32000, 35000, 37000, 34000, 21000, 20000, 30000, 32000, 
		        32000, 31000, 34000, 32000, 22000, 31000, 32000, 22000,
	                0, 0, 0, 0, 0, 0, 0, 0,
	                0, 0, 0, 0, 0, 0, 0, 0 ];

## Default sq1 bias values

default_sq1_bias    = [ 5000, 5500, 5000, 5000, 5000, 5500, 0, 5500,
		        5500, 5500, 5500, 5500, 5500, 5500, 5500, 5500,
		        5500, 5500, 5500, 5500, 5500, 5500, 5500, 5500,
		        5500, 5500, 5500, 5500, 5500, 5500, 5500, 5000,
			5500,    0,    0,    0,    0,    0,    0,    0, 
		           0 ];

default_sq1_bias_off = [ 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
		     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
		     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
		     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
		     1000,    0,    0,    0,    0,    0,    0,    0, 
		        0 ];


## Flags for columns whose SA/SQ2 biases should be turned off at the end of tuning

columns_off = [
	 0, 0, 0, 0, 0, 0, 0, 0,
	 0, 0, 0, 0, 0, 0, 0, 0,
	 0, 0, 0, 0, 0, 0, 0, 0,
	 0, 0, 0, 0, 0, 0, 0, 0 ];


#
#
# Section 4: auto-tuning control parameters
#
#

## Debugging / engineering modes

# Set this to 1 to terminate auto-tuning before the ADC-offset sq1 feedback ramps.
stop_after_sq1_servo = 0;


## SA properties and ramp parameters
# Found sa_offset_bias_ratio to be too high at old setting (0.7) RWA (20100901)
sa_offset_bias_ratio = 0.3;

### These quanta, in SA_fb units, are used to protect sq2servo from
### crossing the DAC range.  The values do not need to be fine-tuned.
### The values here were measured to +- 5 by JPF on 2009-11-18.
sa_flux_quanta = [ 31125, 31115, 31115, 31110, 31110, 31110, 30910, 30955, 
	           31255, 31415, 31550, 31660, 31395, 31695, 31585, 31525 ];

# Auto-tune does a flux feedback ramp, and optionally ramps the sa bias too.
sa_ramp_bias       = 0;

sa_ramp_flux_start = 0; 
sa_ramp_flux_count = 400;
sa_ramp_flux_step  = 160;

sa_ramp_bias_start = 15000;
sa_ramp_bias_step  = 1500;
sa_ramp_bias_count = 25;

### These quanta, in SQ2_fb units, are used to protect sq1servo from
### crossing the DAC range.
### The values here were measured to +/-5 ADU by JPF on 2009-11-18
###sq2_flux_quanta = [  6180,  6135,  6150,  6160,  6140,  6185,  6220,  6185,
###		     6235,  6235,  6200,  6130,  6110,  6160,  6205,  6130 ];
### The values here were measured by GPT on 2010-06-18.  Some of the values
### are rather strange, but GPT will have to learn how to fix them.
sq2_flux_quanta = [  6160,  6170,  6140,  0,  6060,  6090,  6110,  0,
		     8200,  6110,  7050,  6100,  6130,  6140,  6110,  6120 ];

## preferred rows for single row squid 2 fb choices.

sq2_rows = [ 9,9,9,9,9,9,9,9,
	     9,9,9,9,9,9,9,9,
	     9,9,9,9,9,9,9,9,
	     9,9,9,9,9,9,9,9 ];

## Gains (feedback / error) for auto-tuning servo steps

sq2servo_gain = [ 0.2 , 0.2, 0.2, 0.2 ];   
sq1servo_gain = [ -0.04, -0.04, -0.04, -0.04 ];

sq2_servo_gain = [  0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2,
                    0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2 ];
sq1_servo_gain = [ -0.04,-0.04,-0.04,-0.04,-0.04,-0.04,-0.04,-0.04,
                   -0.04,-0.04,-0.04,-0.04,-0.04,-0.04,-0.04,-0.04 ];

## Ramp parameters for servo steps

sq2_servo_flux_start =     0;
sq2_servo_flux_count =   1600;
sq2_servo_flux_step  =   10;

sq1_servo_flux_start = -8000;
sq1_servo_flux_count =   400;
sq1_servo_flux_step  =    40;

sq1_servo_bias_ramp  = 0;
sq1_servo_bias_start = 0;
sq1_servo_bias_count = 1;
sq1_servo_bias_step  = 0;

## If sq2_servo_bias_ramp is set, the sq2 servo step will do sq2
## servos at each bias defined below.  The auto-setup will exit
## without performing further analysis.

sq2_servo_bias_ramp = 0;
sq2_servo_bias_start = 2500;
sq2_servo_bias_count = 24;
sq2_servo_bias_step  = 2500;

## If sq1servo_all_rows is set, all rows will be servoed even if
## fast_sq2 is not being used.

sq1_servo_all_rows = 0;

## sq1 ramp rows to plot, and locktest row to plot

sq1ramp_plot_rows = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32  ];
locktest_plot_row = 9;

## sq1 ramp/rampc parameters, for ramp_sq1_fb and final adc_offset choice
sq1_ramp_flux_start = -8160;
sq1_ramp_flux_step  =    40;
sq1_ramp_flux_count =   400;

## locktest 'good squid' amplitude threshold for 'off' recommendation

locktest_pass_amplitude = 1000;

## Locking slopes for sq1 and sq2
### -- obsolete!  Set by servo gains.
sq1servo_slope = +1;
sq2servo_slope = +1;	

## Should we ramp tes bias at the very end and acquire open loop error?

sq1_ramp_tes_bias = 0;
sq1_ramp_tes_bias_start = 0;
sq1_ramp_tes_bias_step  = 1;
sq1_ramp_tes_bias_count = 500;

## Low and high detector bias levels for normalizing detectors

tes_bias_idle   = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ];
tes_bias_normal = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ];
tes_bias_normal_time = 0;
tes_bias_do_reconfig = 0;

## Starting points for sq1servo and sq2servo programs (written by auto-tuner)

sq2servo_safb_init  = [ 0, 0, 0, 0, 0, 0, 0, 0,
	                0, 0, 0, 0, 0, 0, 0, 0,
	                0, 0, 0, 0, 0, 0, 0, 0,
	                0, 0, 0, 0, 0, 0, 0, 0 ];

sq1servo_sq2fb_init = [ 0, 0, 0, 0, 0, 0, 0, 0,
	                0, 0, 0, 0, 0, 0, 0, 0,
	                0, 0, 0, 0, 0, 0, 0, 0,
	                0, 0, 0, 0, 0, 0, 0, 0 ];


#
#
# TES ramp and IV curves
#
#

# These are read by ramp_tes_bias script
# Note that ramp_tes_step will normally be *negative*.
ramp_tes_start      =  6000;
ramp_tes_step       =    -6;
ramp_tes_count      =  1000;
ramp_tes_final_bias =     0;
ramp_tes_initial_pause =  1;
ramp_tes_period_us  = 100000;

iv_data_mode = 0;

#
#
# Bias step variables
#
#

# MCE card and parameter id's.  Too bad.
bias_line_card = [7, 8, 9];
bias_line_para = [0x21, 0x21, 0x21];


#
#
# Section 5: config script generation variables
#
#

## Link to tuning runfile block for this data.  Relative to
##  /data/cryo/, e.g. "20090101/1230768000/1230768000.sqtune"

tune_id = "";

## Enable / disable the configuration of the indicated hardware

config_rc = [ 1, 1, 0, 0 ];
config_sync = 0;
config_fast_sq2 = 1;

## When config_dead_detectors is 0, the dead_detectors mask will be
## used to set PID parameters to zero for all dead detectors.

config_dead_tes = 0;

## Frame timing and readout parameters

data_rate         = 150;
row_len           = 98;
num_rows          = 33;
num_rows_reported = 33;
readout_row_index =  0;

## Row timing parameters

sample_dly     = 88;
sample_num     = 10;
fb_dly         =  7;
row_dly        =  4;

## Readout and servo parameters

data_mode      =  10;
flux_jumping   =  0;

servo_mode     =  3;
servo_p        =  [  0,  0,  0,  0,  0,  0,  0,  0,
		     0,  0,  0,  0,  0,  0,  0,  0,
		     0,  0,  0,  0,  0,  0,  0,  0,
		     0,  0,  0,  0,  0,  0,  0,  0 ];
servo_i        =  [  0,  0,  0,  0,  0,  0,  0,  0,
		     0,  0,  0,  0,  0,  0,  0,  0,
		     0,  0,  0,  0,  0,  0,  0,  0,
		     0,  0,  0,  0,  0,  0,  0,  0 ];
servo_d        =  [  0,  0,  0,  0,  0,  0,  0,  0,
		     0,  0,  0,  0,  0,  0,  0,  0,
		     0,  0,  0,  0,  0,  0,  0,  0,
		     0,  0,  0,  0,  0,  0,  0,  0 ];

## Dead detectors! 1 means dead!

dead_detectors = [
/*      0,1,2,3,4,5,6,7,8,9, 0,1,2,3,4,5,6,7,8,9, 0,1,2,3,4,5,6,7,8,9, 0,1,2,3,4,5,6,7,8,9, 0, */
/* 0*/	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
/* 5*/	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
/*10*/	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
/*15*/	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,

/*      0,1,2,3,4,5,6,7,8,9, 0,1,2,3,4,5,6,7,8,9, 0,1,2,3,4,5,6,7,8,9, 0,1,2,3,4,5,6,7,8,9, 0, */
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
/*20*/	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
/*25*/	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
/*30*/	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0 ];

## TES bias levels

tes_bias = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ];


## Row order - re-map multiplexor row 40 to MCE row 32.

row_order   = [ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9,
	       10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	       20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	       30, 31, 32, 33, 34, 35, 36, 37, 38,
	       39, 40 ];


## sq1 stage settings

## flux_quanta - v-phi wavelengths, in sq1 feedback units.  'If
## config_flux_quanta_all' is 0, then the 32 entries in in
## 'flux_quanta' are duplicated 41 times and written to 'rc#
## flx_quanta%'.  Otherwise, the 32x41 values in flux_quanta_all are
## written to each detector channel.

config_flux_quanta_all = 0;

flux_quanta = [ 2600, 2600, 2600, 2600, 2600, 2600, 2600, 2600, 
	      	2600, 2600, 2600, 2600, 2600, 2600, 2600, 2600, 
		2600, 2600, 2600, 2600, 2600, 2600, 2600, 2600, 
		2600, 2600, 2600, 2600, 2600, 2600, 2600, 2600 ];

flux_quanta_all = [
/*  0 */  9488, 9443, 9456, 9454, 9458, 9455, 9458, 9460, 9485, 9485, 9485, 9477, 9541, 9472, 9477, 9472, 9477, 9494, 9474, 9469, 9481, 9459, 9468, 9458, 9466, 9462, 9472, 9493, 9494, 9491, 9489, 9497, 9490, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485,
/*  1 */  9508, 9508, 9510, 9511, 9509, 9514, 9512, 9516, 9485, 9485, 9512, 9514, 9512, 9512, 9511, 9509, 9513, 9496, 9512, 9504, 9510, 9523, 9517, 9524, 9509, 9507, 9509, 9508, 9508, 9513, 9514, 9513, 9509, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485,
/*  2 */  9508, 9505, 9504, 9507, 9506, 9481, 9511, 9514, 9523, 9485, 9512, 9510, 9506, 9513, 9509, 9512, 9515, 9511, 9503, 9515, 9518, 9501, 9512, 9503, 9512, 9512, 9512, 9516, 9510, 9531, 9516, 9515, 9510, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485,
/*  3 */  9472, 9455, 9466, 9465, 9462, 9461, 9458, 9460, 9606, 9485, 9462, 9462, 9464, 9466, 9462, 9465, 9465, 9462, 9458, 9485, 9461, 9469, 9461, 9469, 9466, 9463, 9461, 9461, 9465, 9485, 9467, 9464, 9475, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485,
/*  4 */  9448, 9454, 9454, 9474, 9463, 9458, 9463, 9462, 9485, 9485, 9451, 9461, 9485, 9485, 9460, 9461, 9455, 9462, 9460, 9461, 9458, 9444, 9442, 9436, 9450, 9449, 9449, 9452, 9463, 9454, 9456, 9454, 9442, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485,
/*  5 */  9462, 9430, 9431, 9437, 9438, 9435, 9436, 9438, 9485, 9485, 9429, 9436, 9434, 9429, 9431, 9438, 9435, 9445, 9426, 9428, 9430, 9427, 9444, 9430, 9439, 9439, 9441, 9436, 9442, 9440, 9463, 9449, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485,
/*  6 */  9528, 9532, 9529, 9525, 9528, 9523, 9528, 9530, 9485, 9485, 9528, 9529, 9529, 9529, 9528, 9530, 9527, 9526, 9528, 9523, 9529, 9530, 9529, 9526, 9531, 9533, 9531, 9527, 9530, 9533, 9531, 9536, 9535, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485,
/*  7 */  9475, 9478, 9477, 9478, 9475, 9480, 9478, 9476, 9485, 9485, 9476, 9474, 9472, 9476, 9476, 9474, 9477, 9473, 9476, 9472, 9478, 9469, 9476, 9457, 9477, 9475, 9476, 9478, 9477, 9479, 9481, 9475, 9481, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485,
/*  8 */  9487, 9473, 9473, 9473, 9473, 9485, 9473, 9483, 9485, 9485, 9478, 9490, 9487, 9487, 9483, 9480, 9480, 9487, 9481, 9485, 9482, 9484, 9486, 9485, 9487, 9484, 9485, 9486, 9491, 9473, 9473, 9473, 9496, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485,
/*  9 */  9508, 9499, 9501, 9498, 9507, 9502, 9507, 9503, 9473, 9485, 9507, 9506, 9504, 9508, 9501, 9495, 9501, 9502, 9502, 9499, 9502, 9508, 9510, 9495, 9508, 9508, 9470, 9510, 9515, 9507, 9505, 9509, 9504, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485,
/* 10 */  9506, 9494, 9482, 9497, 9497, 9497, 9498, 9502, 9485, 9485, 9504, 9502, 9498, 9499, 9497, 9491, 9492, 9495, 9491, 9490, 9496, 9485, 9492, 9486, 9494, 9502, 9495, 8814, 9503, 9502, 9505, 9502, 9510, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485,
/* 11 */  9454, 9460, 9451, 9448, 9439, 9439, 9441, 9444, 9485, 9485, 9449, 9447, 9448, 9449, 9449, 9449, 9449, 9450, 9447, 9449, 9448, 9446, 9446, 9451, 9449, 9452, 9451, 9452, 9455, 9453, 9454, 9455, 9459, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485,
/* 12 */  9524, 9530, 9526, 9532, 9538, 9535, 9534, 9534, 9485, 9485, 9527, 9534, 9485, 9485, 9530, 9530, 9523, 9523, 9527, 9524, 9524, 9516, 9518, 9515, 9512, 9524, 9522, 9528, 9526, 9527, 9527, 9535, 9524, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485,
/* 13 */  9479, 9469, 9473, 9475, 9478, 9475, 9476, 9477, 9527, 9485, 9479, 9501, 9510, 9485, 9487, 9485, 9486, 9485, 9483, 9480, 9484, 9486, 9485, 9497, 9486, 9486, 9486, 9486, 9488, 9489, 9490, 9479, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485,
/* 14 */  9547, 9521, 9538, 9541, 9542, 9541, 9544, 9543, 9498, 9485, 9544, 9548, 9543, 9543, 9546, 9543, 9547, 9547, 9540, 9541, 9543, 9550, 9548, 9527, 9537, 9542, 9535, 9543, 9542, 9546, 9543, 9535, 9547, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485,
/* 15 */  9449, 9427, 9448, 9429, 9430, 9463, 9418, 9448, 9485, 9485, 9445, 9432, 9430, 9440, 9423, 9439, 9466, 9462, 9453, 9436, 9423, 9415, 9450, 9442, 9457, 9424, 9451, 9458, 9449, 9428, 9449, 9443, 9428, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485,
/* 16 */  9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485,
/* 17 */  9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485,
/* 18 */  9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485,
/* 19 */  9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485,
/* 20 */  9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485,
/* 21 */  9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485,
/* 22 */  9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485,
/* 23 */  9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485,
/* 24 */  9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485,
/* 25 */  9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485,
/* 26 */  9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485,
/* 27 */  9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485,
/* 28 */  9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485,
/* 29 */  9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485,
/* 30 */  9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485,
/* 31 */  9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485, 9485
];

fb_const    = 0;


### SQ1 biases, one per row

sq1_bias    = [ 0, 0, 0, 0, 0, 0, 0, 0,
	        0, 0, 0, 0, 0, 0, 0, 0,
	        0, 0, 0, 0, 0, 0, 0, 0,
	        0, 0, 0, 0, 0, 0, 0, 0,
	        0, 0, 0, 0, 0, 0, 0, 0,
	        0 ];

sq1_bias_off = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      	         0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	         0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		 0 ];


## Stage 2 squids; 1 entry per channel

### SQ2 biases, one per column

sq2_bias    = [ 0, 0, 0, 0, 0, 0, 0, 0,
	        0, 0, 0, 0, 0, 0, 0, 0,
	        0, 0, 0, 0, 0, 0, 0, 0,
	        0, 0, 0, 0, 0, 0, 0, 0 ];


### When the biasing address card (bac) is not present, or if
### config_fast_sq2==0, then the values in sq2_fb are used for each
### column.  If config_fast_sq2==1, the values in sq2_fb_set are
### loaded into the bac and fast sq2 switching is enabled.

sq2_fb      = [ 0, 0, 0, 0, 0, 0, 0, 0,
	        0, 0, 0, 0, 0, 0, 0, 0,
	        0, 0, 0, 0, 0, 0, 0, 0,
	        0, 0, 0, 0, 0, 0, 0, 0 ];

sq2_fb_set = [
/* 0*/	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
/*10*/	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
/*20*/	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
/*30*/	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0 ];


### Series array and ADC settings, 1 entry per column

sa_bias     = [ 0, 0, 0, 0, 0, 0, 0, 0,
	        0, 0, 0, 0, 0, 0, 0, 0,
	        0, 0, 0, 0, 0, 0, 0, 0,
	        0, 0, 0, 0, 0, 0, 0, 0 ];

sa_fb       = [ 0, 0, 0, 0, 0, 0, 0, 0,
	        0, 0, 0, 0, 0, 0, 0, 0,
	        0, 0, 0, 0, 0, 0, 0, 0,
	        0, 0, 0, 0, 0, 0, 0, 0 ];

sa_offset   = [ 0, 0, 0, 0, 0, 0, 0, 0,
	        0, 0, 0, 0, 0, 0, 0, 0,
	        0, 0, 0, 0, 0, 0, 0, 0,
	        0, 0, 0, 0, 0, 0, 0, 0 ];


## ADC offsets

### When config_adc_offset_all==0, the values in adc_offset_c are
### applied to the entire column.  When config_adc_offset_all==1, each
### readout row/column is assigned an adc_offset from the
### adc_offset_cr array.

config_adc_offset_all = 1;

adc_offset_c = [
	 0,0,0,0,0,0,0,0,
	 0,0,0,0,0,0,0,0,
	 0,0,0,0,0,0,0,0,
	 0,0,0,0,0,0,0,0 ];

adc_offset_cr = [
/* 0*/	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
/*10*/	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
/*20*/	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
/*30*/	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0 ];

#
# Template for MCE config settings file
#

## This file contains a variety of information, including hardware
## presence/absence, a description of the experiments default run
## parameters, and a set of variables that are updated by the
## auto-tuning program.  This ultimately becomes the source data for
## mce_make_config, which produces a bash script that puts the MCE in
## a desired state.

## To read from or write to the parameters in this file, use the
## mas_param program.  If you want to access this data from IDL,
## mas_param can create a set of functions that facilitate this.

## These comments are only present in the template version of the
## config file.  Once the file has been modified by an automatic
## agent, comments and formatting are stripped.


#Array ID corresponding to this configuration file.  This can used for
#looking up additional configuration.

array_id = "AR3";

#
#
# Section 1: file structure parameters
#
#

array_width = 41;   #Internal specification of how many rows our 2d arrays hold


#
#
# Section 2: hardware description
#
#

## Indicate presence of each readout card, sync box, biasing address card.
hardware_rc = [ 1, 1, 1, 1 ];
hardware_sync = 1;
hardware_bac = 0;

## Sync box rule for config_sb==0
sb0_select_clk = 0;
sb0_use_dv     = 0;
sb0_use_sync   = 0;

## Sync box rule for config_sb==1
sb1_select_clk = 1;
sb1_use_dv     = 2;
sb1_use_sync   = 2;


#
#
# Section 3: default/typical parameters
#
#

## Row count, integration count, final data mode and servo values

default_num_rows = 33;
default_sample_num = 10;
default_data_mode = 10;
default_flux_jumping = 1;

default_servo_p        =  [  0,  0,  0,  0,  0,  0,  0,  0,
			     0,  0,  0,  0,  0,  0,  0,  0,
			     0,  0,  0,  0,  0,  0,  0,  0,
			     0,  0,  0,  0,  0,  0,  0,  0 ];
default_servo_i        =  [-240,-240,-240,-240,-240,-240,-240,-240,
			   -240,-240,-240,-240,-240,-240,-240,-240,
			   -240,-240,-240,-240,-240,-240,-240,-240,
			   -240,-240,-240,-240,-240,-240,-240,-240 ];
default_servo_d        =  [  0,  0,  0,  0,  0,  0,  0,  0,
			     0,  0,  0,  0,  0,  0,  0,  0,
			     0,  0,  0,  0,  0,  0,  0,  0,
			     0,  0,  0,  0,  0,  0,  0,  0 ];

## Default SA bias values (in case SA bias is not being ramped)

default_sa_bias     = [ 37500, 31500, 33000, 34500, 39000, 36000, 34500, 31500, 
			33000, 33000, 33000, 33000, 33000, 34500, 39000, 36000, 
			36000, 39000, 39000, 37500, 30000, 40500, 39000, 37500, 
			36000, 36000, 34500, 39000, 39000, 40500, 39000, 33000 ];

## Default sq2 bias values

# 16-31 from 1214106816.  Column 23 ramps up with bias.  24
# flat-lined. 31 was digital garbage.
#  MFH - 1214119875 suggests ammend 0-7 to: same,??,same,same,37500,30000,32500,30000
#                                  8-15 to: same,30k,32.5,30,same,same,same,same
default_sq2_bias    = [ 32500, 20000, 20000, 22500, 17500, 17500, 17500, 20000,
 	                30000, 30000, 30000, 30000, 20000, 20000, 20000, 15000,
	                27500, 27500, 27500, 22500, 22500, 35000, 22500, 50000,
	                30000, 27500, 27500, 32500, 25000, 25000, 25000, 30000 ];


## Default sq1 bias values
# Note that these must be de-convolved against row-order!  i.e. if
# first entry in row_order is "17", then you must change the value at
# index 17 below to affect "readout" row 17's behaviour.
# Index 15 is off because of the cable-swap issue which leaves
# row_select 15 open.  Index 10 (readout row 27) is turned off due to
# a potential bad squid in column 13 of that row.
default_sq1_bias    = [ 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000,
	                16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000,
	                16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000,
	                16000, 16000, 16000,     0, 16000, 16000, 16000, 16000,
	                16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000,
	                16000 ];


## Flags for columns whose SA/SQ2 biases should be turned off at the end of tuning

columns_off = [
	 0, 0, 0, 0, 0, 0, 0, 0,
	 0, 0, 0, 0, 0, 0, 0, 0,
	 0, 0, 0, 0, 0, 0, 0, 0,
	 0, 0, 0, 0, 0, 0, 0, 0 ];


#
#
# Section 4: auto-tuning control parameters
#
#

## Debugging / engineering modes

# Set this to 1 to terminate auto-tuning before the ADC-offset sq1 feedback ramps.
stop_after_sq1_servo = 0;


## SA properties and ramp parameters

sa_offset_bias_ratio = 0.417;

# Auto-tune does a flux feedback ramp, and optionally ramps the sa bias too.
sa_ramp_bias       = 0;

sa_ramp_flux_start = 0; 
sa_ramp_flux_count = 100;
sa_ramp_flux_step  = 640;

sa_ramp_bias_start = 15000;
sa_ramp_bias_step  = 1500;
sa_ramp_bias_count = 25;

## preferred rows for single row squid 2 fb choices.
## 16-23 based on 1214109124. 25-31 from 1214112060. 24 from a rampc...
sq2_rows = [ 29, 17, 23,  1, 20, 22, 19, 25,
	     29, 24, 19, 19, 11, 25, 19,  4,
	     23, 28, 12, 17, 23,  5, 28, 25,
	      3, 29, 11,  6, 25,  8, 31,  0 ];

## Gains (feedback / error) for auto-tuning servo steps; one per readout card

sq2servo_gain = [ 0.04, 0.2 , 0.04, 0.04 ];
sq1servo_gain = [ 0.04, 0.04, 0.04, 0.04 ];

## Ramp parameters for servo steps

sq2_servo_flux_start =     0;
sq2_servo_flux_count =   400;
sq2_servo_flux_step  =   30;

sq1_servo_flux_start = -8000;
sq1_servo_flux_count =   400;
sq1_servo_flux_step  =    40;


## If sq2_servo_bias_ramp is set, the sq2 servo step will do sq2
## servos at each bias defined below.  The auto-setup will exit
## without performing further analysis.

sq2_servo_bias_ramp = 0;
sq2_servo_bias_start = 2500;
sq2_servo_bias_count = 24;
sq2_servo_bias_step  = 2500;

## If sq1servo_all_rows is set, all rows will be servoed even if
## fast_sq2 is not being used.

sq1_servo_all_rows = 0;

## sq1 ramp rows to plot, and locktest row to plot

sq1ramp_plot_rows = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32 ];
locktest_plot_row = 9;

## sq1 ramp/rampc parameters, for ramp_sq1_fb and final adc_offset choice
sq1_ramp_flux_start = -8160;
sq1_ramp_flux_step  =    40;
sq1_ramp_flux_count =   400;

## locktest 'good squid' amplitude threshold for 'off' recommendation

locktest_pass_amplitude = 5000;

## Locking slopes for sq1 and sq2

sq1servo_slope = -1;
sq2servo_slope = -1;

## Should we ramp tes bias at the very end and acquire open loop error?

sq1_ramp_tes_bias = 1;
sq1_ramp_tes_bias_start = 0;
sq1_ramp_tes_bias_step  = 1;
sq1_ramp_tes_bias_count = 500;

## Low and high detector bias levels for normalizing detectors

tes_bias_idle   = [ 4150, 3840, 5540 ];
tes_bias_normal = [60000, 60000, 60000];
tes_bias_normal_time = 0.1;

## Starting points for sq1servo and sq2servo programs (written by auto-tuner)

sq2servo_safb_init  = [ 0, 0, 0, 0, 0, 0, 0, 0,
	                0, 0, 0, 0, 0, 0, 0, 0,
	                0, 0, 0, 0, 0, 0, 0, 0,
	                0, 0, 0, 0, 0, 0, 0, 0 ];

sq1servo_sq2fb_init = [ 0, 0, 0, 0, 0, 0, 0, 0,
	                0, 0, 0, 0, 0, 0, 0, 0,
	                0, 0, 0, 0, 0, 0, 0, 0,
	                0, 0, 0, 0, 0, 0, 0, 0 ];

#
#
# TES ramp and IV curves
#
#

# These are read by ramp_tes_bias script
# Note that ramp_tes_step will normally be *negative*.
ramp_tes_start      = 20000;
ramp_tes_step       =   -32;
ramp_tes_count      =   625;
ramp_tes_final_bias =  6000;
ramp_tes_initial_pause = 10;
ramp_tes_period_us  = 100000;

iv_data_mode = 10;

#
#
# Bias step variables
#
#

# MCE card and parameter id's.  Too bad.
bias_line_card = [7, 8, 9];
bias_line_para = [0x21, 0x21, 0x21];


#
#
# Section 5: config script generation variables
#
#

## Enable / disable the configuration of the indicated hardware

config_rc = [ 1, 1, 1, 1 ];
config_sync = 1;
config_fast_sq2 = 0;

## When config_dead_detectors is 0, the dead_detectors mask will be
## used to set PID parameters to zero for all dead detectors.

config_dead_tes = 0;

## Frame timing and readout parameters

data_rate         = 38;
row_len           =100;
num_rows          = 33;
num_rows_reported = 33;
readout_row_index =  0;

## Row timing parameters

sample_dly     = 90;
sample_num     = 10;
fb_dly         =  7;
row_dly        =  4;

## Readout and servo parameters

data_mode      =  0;
flux_jumping   =  0;
servo_mode     =  3;
servo_p        =  [  0,  0,  0,  0,  0,  0,  0,  0,
		     0,  0,  0,  0,  0,  0,  0,  0,
		     0,  0,  0,  0,  0,  0,  0,  0,
		     0,  0,  0,  0,  0,  0,  0,  0 ];
servo_i        =  [  0,  0,  0,  0,  0,  0,  0,  0,
		     0,  0,  0,  0,  0,  0,  0,  0,
		     0,  0,  0,  0,  0,  0,  0,  0,
		     0,  0,  0,  0,  0,  0,  0,  0 ];
servo_d        =  [  0,  0,  0,  0,  0,  0,  0,  0,
		     0,  0,  0,  0,  0,  0,  0,  0,
		     0,  0,  0,  0,  0,  0,  0,  0,
		     0,  0,  0,  0,  0,  0,  0,  0 ];


## Dead detectors! 1 means dead!  This is not where users set dead
## detectors; it is overwritten by the auto-tuning.  Set dead dets
## masks in $MAS_TEMPLATE/dead_lists/<array_id>/dead_*.cfg.

/*      0,1,2,3,4,5,6,7,8,9, 0,1,2,3,4,5,6,7,8,9, 0,1,2,3,4,5,6,7,8,9, 0,1,2,3,4,5,6,7,8,9, 0, */
dead_detectors = [
/* 0*/	0,0,1,0,0,0,0,0,0,0, 0,0,0,0,0,1,0,0,0,1, 0,0,0,0,0,0,0,0,0,0, 0,0,0,1,1,1,1,1,1,1, 1,
	0,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,1,0,0,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,1,1,1,1,1,1,1, 1,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,1,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,1,1,1,1,1,1,1, 1,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,1,1,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,1,0,1,1,1,1,1,1,1, 1,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,1,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 1,1,0,1,1,1,1,1,1,1, 1,
/* 5*/	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,1,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,1,1,1,1,1,1,1, 1,
	0,0,0,0,0,0,0,0,0,1, 0,0,0,1,0,1,0,0,0,0, 0,0,0,0,0,0,1,0,0,0, 1,0,0,1,1,1,1,1,1,1, 1,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,1,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,1,1,1,1,1,1,1, 1,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,1,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,1,1,1,1,1,1,1, 1,
	1,0,0,0,0,1,0,0,0,0, 0,0,0,0,1,1,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,1,1,1,1,1,1,1, 1,
/*10*/	0,1,0,0,0,0,0,0,0,0, 0,0,0,0,0,1,0,0,0,0, 0,0,0,1,0,0,0,0,0,0, 0,0,1,1,1,1,1,1,1,1, 1,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,1,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,1,1,1,1,1,1,1, 1,
	0,0,1,0,0,0,0,0,0,0, 0,0,0,0,0,1,0,0,0,1, 0,0,0,0,0,0,0,0,0,0, 0,0,0,1,1,1,1,1,1,1, 1,
	0,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,1,0,0,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,1,1,1,1,1,1,1, 1,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,1,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,1,1,1,1,1,1,1, 1,
/*15*/	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,1,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,1,1,1,1,1,1,1, 1,

/*      0,1,2,3,4,5,6,7,8,9, 0,1,2,3,4,5,6,7,8,9, 0,1,2,3,4,5,6,7,8,9, 0,1,2,3,4,5,6,7,8,9, 0, */

	0,0,0,0,1,0,0,0,0,0, 0,0,0,0,0,1,0,0,0,0, 0,1,0,0,0,0,0,0,0,0, 0,0,0,1,1,1,1,1,1,1, 1,
	0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,1,0,0,0,0, 0,0,0,0,0,1,0,0,0,0, 0,0,0,1,1,1,1,1,1,1, 1,
	0,0,0,0,1,0,0,0,0,0, 0,0,0,0,0,1,1,1,1,0, 0,1,0,0,0,0,0,0,0,0, 0,0,0,1,1,1,1,1,1,1, 1,
	0,0,0,0,0,0,0,0,0,1, 1,1,0,0,0,1,0,0,0,0, 0,0,0,0,0,0,1,1,1,0, 0,0,0,1,1,1,1,1,1,1, 1,
/*20*/	0,1,0,0,0,0,0,0,0,0, 0,0,0,0,0,1,0,0,1,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,1,1,1,1,1,1,1, 1,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,1,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,1,1,1,1,1,1,1, 1,
	0,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,1,0,0,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,1,1,1,1,1,1,1, 1,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,1,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,1,1,1,1,1,1,1, 1,
	1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,
/*25*/	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,1,0,0,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,1,1,1,1,1,1,1, 1,
	1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,
	0,0,1,1,1,1,0,0,0,0, 0,0,0,0,0,1,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,1,1,1,1,1,1,1, 1,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,1,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,1,1,1,1,1,1,1, 1,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,1,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,1,1,1,1,1,1,1, 1,
/*30*/	0,0,0,0,0,0,0,0,0,1, 0,0,0,0,0,1,0,0,0,0, 0,0,0,0,0,0,1,1,0,0, 1,0,1,1,1,1,1,1,1,1, 1,
	1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1 ];

## TES bias levels

tes_bias  = [ 0, 0, 0];


## Row order - re-map multiplexor row 40 to MCE row 32.
# Rows reordered to account for cable swap in cryostat.
row_order   = [ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9,
	       10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	       20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	       30, 31, 40, 32, 33, 34, 35, 36, 37, 38,
	       39 ];
#row_order   = [17, 18, 19, 20, 21, 22, 23, 24, 25, 26,
#	       27, 28, 29, 30, 31, 15, 40,  0,  1,  2,
#	        3,  4,  5,  6,  7,  8,  9, 10, 11, 12,
#	       13, 14, 16, 32, 33, 34, 35, 36, 37, 38,
#	       39 ];


## sq1 stage settings

## flux_quanta - v-phi wavelengths, in sq1 feedback units.  'If
## config_flux_quanta_all' is 0, then the 32 entries in in
## 'flux_quanta' are duplicated 41 times and written to 'rc#
## flx_quanta%'.  Otherwise, the 32x41 values in flux_quanta_all are
## written to each detector channel.

config_flux_quanta_all = 1;

# Measured from hi-res curves in 1214118276.  Col 31 not resolved.
flux_quanta = [ 7701, 7701, 7700, 7701, 7700, 7701, 7701, 7701,
	        7701, 7700, 7700, 7700, 7701, 7700, 7701, 7700,
	        7661, 7720, 7680, 7711, 7748, 7644, 7719, 7638,
	        7700, 7700, 7701, 7700, 7702, 7701, 7702, 7700 ];

# Measured by EB, Sep. 2008.  Based on 9 different ramps.
flux_quanta_all = [
/*  0 */ 7711,7711,   0,7724,7720,7742,7747,7747,7747,7756,7764,7764,7764,7756,7729,   0,7733,7720,7720,7711,7729,7720,7729,7724,7680,7680,7711,7711,7711,7707,7702,7689,7680,0,0,0,0,0,0,0,0,
/*  1 */ 7684,7702,7707,7716,7716,7707,7711,7711,7680,7716,7707,7707,7707,7707,7644,7445,7707,7711,7680,7764,7680,7680,7680,7707,7680,7680,7698,7680,7684,7684,7680,7680,7680,0,0,0,0,0,0,0,0,
/*  2 */ 7773,7764,7756,7764,7760,7769,7769,7778,7782,7800,7791,7804,7791,7809,7800,   0,7844,7720,7849,7831,7809,7778,7778,7720,7782,7778,7773,7760,7733,7751,7756,7747,7720,0,0,0,0,0,0,0,0,
/*  3 */ 7742,7756,7751,7756,7760,7760,7764,7764,7764,7760,7769,7769,7782,7764,   0,   0,7773,7769,7764,7764,7760,7760,7756,7760,7756,7756,7747,7720,7756,7751,7747,7742,7720,0,0,0,0,0,0,0,0,
/*  4 */ 7711,7702,7711,7724,7724,7720,7729,7729,7733,7720,7738,7729,7724,7711,7720,   0,7729,7733,7742,7747,7747,7747,7724,7733,7720,7711,7711,7689,7684,7680,7689,7676,7680,0,0,0,0,0,0,0,0,
/*  5 */ 7702,7707,7698,7707,7720,7720,7738,7729,7738,7742,7733,7729,7742,7729,7729,   0,7756,7760,7764,7782,7853,7747,7747,7742,7733,7640,7733,7729,7716,7693,7698,7680,7640,0,0,0,0,0,0,0,0,
/*  6 */ 7720,7787,7791,7787,7800,7791,7782,7791,7773,7782,7787,7782,7787,7778,7773,   0,7787,7787,7791,7796,7782,7787,7787,7787,7782,7720,7782,7773,7764,8542,   0,7756,7720,0,0,0,0,0,0,0,0,
/*  7 */ 7778,7764,7773,7778,7756,7764,7778,7787,7782,7804,7791,7796,7800,7787,7796,   0,7791,7804,7756,7760,7893,7858,7818,7791,7787,7764,7720,7756,7751,7751,7756,7738,7720,0,0,0,0,0,0,0,0,
/*  8 */ 7729,7729,7729,7733,7733,7729,7733,7733,7733,7733,7733,7733,7733,7729,7738,7780,7738,7742,7738,7738,7729,7738,7729,7742,7729,7733,7733,7733,7733,7733,7720,7729,7756,0,0,0,0,0,0,0,0,
/*  9 */ 7724,7724,7720,7724,7724,7720,7720,7720,7716,7711,7716,7716,7711,7698,7689,   0,7707,7702,7698,7716,7711,7711,7716,7716,7711,7716,7716,7711,7707,7707,7702,7707,7720,0,0,0,0,0,0,0,0,
/* 10 */ 7720,7720,7716,7711,7707,7711,7711,7720,7720,7711,7724,7724,7720,7720,7716,   0,7720,7729,7720,7720,7720,7720,7716,   0,7720,7716,7716,7716,7707,7702,7693,7689,7720,0,0,0,0,0,0,0,0,
/* 11 */ 7733,7738,7724,7724,7724,7729,7720,7729,7724,7720,7720,7711,7724,7716,7702,   0,7716,7720,7720,7720,7729,7720,7738,7724,7724,7720,7729,7711,7707,7711,7716,7707,7720,0,0,0,0,0,0,0,0,
/* 12 */ 7716,7720,7660,7716,7716,7720,7716,7711,7716,7711,7716,7711,7716,7711,7702,7691,7711,7707,7707,7707,7707,7702,7716,7707,7707,7716,7711,7707,7707,7702,7702,7707,7720,0,0,0,0,0,0,0,0,
/* 13 */ 7720,7720,7733,7729,7724,7716,7720,7724,7724,7720,7724,7720,7733,7724,7724,7711,7724,7720,7724,7716,7720,7711,7724,7716,7716,7720,7716,7707,7716,7729,7720,7720,7720,0,0,0,0,0,0,0,0,
/* 14 */ 7689,7684,7684,7684,7684,7689,7680,7676,7684,7667,7680,7689,7667,7671,7658,7644,7684,7676,7667,7680,7671,7676,7680,7702,7680,7680,7689,7680,7676,7676,7671,7676,7680,0,0,0,0,0,0,0,0,
/* 15 */ 7680,7684,7684,7698,7689,7684,7693,7698,7702,7689,7702,7693,7698,7680,7667,7667,7662,7693,7658,7684,7693,7689,7698,7702,7693,7693,7689,7693,7684,7684,7689,7680,7680,0,0,0,0,0,0,0,0,
/* 16 */ 7693,7676,7636,7649,   0,7653,7653,7653,7649,7653,7649,7649,7649,7649,7613,   0,7649,7649,7653,7649,7653,7649,7653,7649,7649,7627,7649,7649,7649,7649,7649,7644,7680,0,0,0,0,0,0,0,0,
/* 17 */ 7693,7702,7693,7693,7693,7693,7693,7693,7693,7693,7693,7693,7693,7693,7689,   0,7693,7693,7693,7693,7693,7693,7693,7689,7693,7693,7693,7738,7729,7729,7729,7733,7720,0,0,0,0,0,0,0,0,
/* 18 */ 7698,7653,7653,7653,7653,7653,7653,7653,7653,7653,7653,7653,7653,7653,7649,   0,7653,7653,7653,7653,7653,7653,7653,7653,7653,7653,7653,7653,7653,7653,7653,7653,7680,0,0,0,0,0,0,0,0,
/* 19 */ 7702,7693,7693,7693,7693,7693,7693,7716,   0,   0,   0,   0,7693,7693,7693,   0,7693,7693,7693,7693,7693,7693,7693,7693,7689,7689,7689,7689,7689,7689,7689,7684,7720,0,0,0,0,0,0,0,0,
/* 20 */ 7751,   0,7760,7751,7751,7756,7769,7760,7760,7787,7769,7760,7760,7760,7760,   0,7756,7756,7751,7756,7756,7760,7751,7756,7738,7729,7724,7720,7720,7720,7716,7720,7760,0,0,0,0,0,0,0,0,
/* 21 */ 7680,7680,7662,7671,7662,7649,7658,7662,7667,7653,7649,7653,7649,7644,7644,   0,7662,7649,7640,7653,7658,7662,7658,7658,7680,7658,7658,7644,7662,7640,7640,7640,7680,0,0,0,0,0,0,0,0,
/* 22 */ 7720,7716,7711,7720,7716,7720,7711,7720,7716,7711,   0,7724,7724,7724,7716,   0,7720,7720,7733,7729,7729,7729,7720,7729,7720,7729,7724,7720,7720,7720,7720,7720,7720,0,0,0,0,0,0,0,0,
/* 23 */ 7662,7644,7640,7640,7640,7640,7640,7636,8991,7640,7640,7640,7644,7636,7631,   0,7631,7644,7636,7644,7640,7640,7631,7640,7640,7640,7636,7640,7636,7640,7636,7640,7640,0,0,0,0,0,0,0,0,
/* 24 */    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,0,0,0,0,0,0,0,0,
/* 25 */ 7676,7680,7680,7671,7680,7676,7676,7676,7671,7667,7676,7644,7671,7662,7658,   0,7662,7671,7662,7676,7649,7658,7658,7667,7649,7649,7671,7671,7658,7653,7658,7667,7680,0,0,0,0,0,0,0,0,
/* 26 */ 7360,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,7400,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,0,0,0,0,0,0,0,0,
/* 27 */ 7520,7516,7520,7520,7524,7516,7516,7520,7511,7511,7516,7516,7520,7511,7507,   0,7520,7500,7366,7524,7536,   0,7427,7533,7516,7524,7516,7520,7529,7516,7520,7520,7524,0,0,0,0,0,0,0,0,
/* 28 */ 7720,7720,7720,7720,7720,7711,7716,7716,7711,7720,7720,7711,7707,7698,7684,7693,7716,7711,7720,7720,7724,7707,7716,7716,7716,7720,7707,7716,7716,7707,7702,7702,7720,0,0,0,0,0,0,0,0,
/* 29 */ 7680,7680,7680,7676,7680,7676,7676,7693,7680,7680,7680,7658,7676,7676,7653,7631,7667,7680,7667,7680,7680,7667,7658,7676,7653,7671,7680,7680,7676,7676,7680,7676,7680,0,0,0,0,0,0,0,0,
/* 30 */ 7720,7720,7716,7720,7716,7720,7716,7720,7720,   0,   0,7711,7720,7716,7711,   0,   0,7720,7720,7720,7711,7720,7716,7720,7716,7720,   0,7716,7716,7716,7702,7689,7720,0,0,0,0,0,0,0,0,
/* 31 */ 7684,7680,   0,7689,7684,7698,7676,7649,7662,7676,7698,7676,7676,7649,7649,   0,7698,7720,7671,7698,7604,7702,7702,7698,7644,7644,7693,7640,7649,7693,7627,7689,7684,0,0,0,0,0,0,0,0
];

fb_const    = 0;


### SQ1 biases, one per row

sq1_bias    = [ 0, 0, 0, 0, 0, 0, 0, 0,
	        0, 0, 0, 0, 0, 0, 0, 0,
	        0, 0, 0, 0, 0, 0, 0, 0,
	        0, 0, 0, 0, 0, 0, 0, 0,
	        0, 0, 0, 0, 0, 0, 0, 0,
	        0 ];


## Stage 2 squids; 1 entry per channel

### SQ2 biases, one per column

sq2_bias    = [ 0, 0, 0, 0, 0, 0, 0, 0,
	        0, 0, 0, 0, 0, 0, 0, 0,
	        0, 0, 0, 0, 0, 0, 0, 0,
	        0, 0, 0, 0, 0, 0, 0, 0 ];


### When the biasing address card (bac) is not present, or if
### config_fast_sq2==0, then the values in sq2_fb are used for each
### column.  If config_fast_sq2==1, the values in sq2_fb_set are
### loaded into the bac and fast sq2 switching is enabled.

sq2_fb      = [ 0, 0, 0, 0, 0, 0, 0, 0,
	        0, 0, 0, 0, 0, 0, 0, 0,
	        0, 0, 0, 0, 0, 0, 0, 0,
	        0, 0, 0, 0, 0, 0, 0, 0 ];

sq2_fb_set = [
/* 0*/	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
/*10*/	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
/*20*/	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
/*30*/	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0 ];


### Series array and ADC settings, 1 entry per column

sa_bias     = [ 0, 0, 0, 0, 0, 0, 0, 0,
	        0, 0, 0, 0, 0, 0, 0, 0,
	        0, 0, 0, 0, 0, 0, 0, 0,
	        0, 0, 0, 0, 0, 0, 0, 0 ];

sa_fb       = [ 0, 0, 0, 0, 0, 0, 0, 0,
	        0, 0, 0, 0, 0, 0, 0, 0,
	        0, 0, 0, 0, 0, 0, 0, 0,
	        0, 0, 0, 0, 0, 0, 0, 0 ];

sa_offset   = [ 0, 0, 0, 0, 0, 0, 0, 0,
	        0, 0, 0, 0, 0, 0, 0, 0,
	        0, 0, 0, 0, 0, 0, 0, 0,
	        0, 0, 0, 0, 0, 0, 0, 0 ];


## ADC offsets

### When config_adc_offset_all==0, the values in adc_offset_c are
### applied to the entire column.  When config_adc_offset_all==1, each
### readout row/column is assigned an adc_offset from the
### adc_offset_cr array.

config_adc_offset_all = 0;

adc_offset_c = [
	 0,0,0,0,0,0,0,0,
	 0,0,0,0,0,0,0,0,
	 0,0,0,0,0,0,0,0,
	 0,0,0,0,0,0,0,0 ];

adc_offset_cr = [
/* 0*/	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
/*10*/	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
/*20*/	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
/*30*/	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,
	0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0 ];

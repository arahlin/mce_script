@/usr/mce/mce_script/idl_pro/Compute_PSD.pro


function noisespec, dir=dir,file,nchunk=nchunk,freq=freq,no_spectra=no_spectra,binned=binned,binsize=binsize,save_bin=save_bin,save_spec=save_spec

;---------------------------------------------------------------------------------------------
; PURPOSE :
; read MCE data using mas_data.pro
; uses ComputePSD.pro to calculate noise spectrum
; return data (Volt), spec (V/rtHz), freq(Hz)
;---------------------------------------------------------------------------------------------
; dir  - string specifying file directory  
; file - string specifying file to open 
; nchunk - number of "chunks" the timestrem gets divided into
; no_spectra - if present, the program doesn't calculate the noise spectrum
; binned - if present, data are binned (if binsize not specified, binsize=10)
; save_bin - save binned data
; save_spec - save noise spectra
;---------------------------------------------------------------------------------------------
close,/all
start_mem=MEMORY(/current)
;---------------------------------------------------------------------------------------------

if keyword_set(file) EQ 0 then begin
file=dialog_pickfile(get_path=filepath,path='/data/cryo/current_data/',/must_exist,/read)
filename=file

endif else begin

path='/data/cryo/'           ; path mce data on bicep0

;paths='~/data/noise/'        ; save files to 'home' directory
filename=path+dir+'/'+file
endelse

;----------------------------------------------------------------------------------------------
;header information
;----------------------------------------------------------------------------------------------

;frame_info = create_struct( $
;                            'version',     header(6), $
;                            'row_len',     header(2), $
;                            'num_rows_rep',header(3), $
;                            'data_rate',   header(4), $
;                            'num_rows',    header(9), $
;                            'rc_present',  rc_present, $
;                            'rc_count',    rc_count, $
;                            'n_frames',    0L, $ ; place holder
;                            'n_columns',   8L*rc_count, $
;                            'n_rows',      header(3), $
;                            'frame_size',  0L, $ ; place holder
;                            'data_size',   0L, $ ; place holder
;                            'footer_size', 1L, $
;                            'data_offset', 43L $
;)

;-------------------------------------------------------------------------------------------------------
data=mas_data(filename,frame_info=frame_info)
;-------------------------------------------------------------------------------------------------------
; converts fb to Volts ---> FB1 is 14bit and Vout_max=1V
;-------------------------------------------------------------------------------------------------------
m=size(data)
if m(1) eq 32 then data=data[0:15,*,*]  else data=data          ; in case the data files have data for 4 RCs!!!!

data=TEMPORARY(data)/2.^14
data=TEMPORARY(data)*0.965          ; Volt --  Vout_max=0.965 for BICEP2 MCE
;#######################################################################################################################################
if keyword_set(binned) then begin

m=size(data)
n_col=m(1)
n_rows=m(2)
npts=m(3)

if keyword_set(binsize) then binsize=binsize else binsize=10

nbins=npts/binsize

bindata=dblarr(n_col,n_rows,nbins,/NOZERO)

i=0
while i le n_col-1 do begin
j=0
while j le n_rows-1 do begin
print,i,j
bindata[i,j,*]=bin_data(TEMPORARY(data(i,j,*)),nbins,sd,ninbin)

j=j+1
endwhile
i=i+1
endwhile
data=bindata
endif
if keyword_set(binned) and keyword_set(save_bin) then save,data,filename=paths+dir+'/binned/'+strmid(filename,14,/reverse_offset)+'_b10.sav'
if keyword_set(no_spectra) then return,data
;#######################################################################################################################################
if keyword_set(binned) and keyword_set(binsize) then begin
data_rate=frame_info.data_rate*binsize  
endif else begin 
if keyword_set(binned) then data_rate=frame_info.data_rate*10.  else data_rate=frame_info.data_rate
endelse


f_samp=1./(0.00000002*frame_info.row_len*frame_info.num_rows*data_rate)   ; f_samp_out=50MHz/num_rows/row_lenght/data_rate

print,'f_samp =',f_samp,' Hz'

m=size(data)
n_col=m(1)
n_row=frame_info.n_rows
npts=m(3)

if (keyword_set(nchunk)) then SEG_LEN=npts/float(nchunk) else SEG_LEN=npts/10.       ; if nchunk is not specified the defaulft is 10

print,'SEG_LEN =',SEG_LEN

;------------------------------------------------------------------------------------------------------------------
; create an array with all the spectra
;------------------------------------------------------------------------------------------------------------------
spec=dblarr(n_col, n_row,(SEG_LEN/2.)+1, /nozero)

i=0
 while i le n_col-1 do begin
j=0   
 while j le n_row-1 do begin

;-------------------------------------------------------------------------------------------------------------
; use Compute_PSD from JamieH to calculate noise
; /WINDOW use an Hanning window when performing the FFT,/yno
; divide tod into segments and averages them
; /RemoveLine = flag, set to remove a best-fit line from each scan
;-------------------------------------------------------------------------------------------------------------

spec[i,j,*] =Compute_PSD(data[i,j,*],SEG_LEN,f_samp,freq=freq,/window)

j=j+1
endwhile
;endfor

i=i+1
endwhile

nf=n_elements(freq)

;##########################################################################################################

!p.multi=[0,2,2]

plot,freq(2:*),spec(0,0,2:*)/35.3/1000.*1.E12,/xlog,/ylog,yrange=[1,1000]
oplot,freq(2:*),replicate(51.0,[100000]),color=255,thick=5
plot,freq(2:*),spec(1,0,2:*)/35.3/1000.*1.E12,/xlog,/ylog,yrange=[1,1000]
oplot,freq(2:*),replicate(51.0,[100000]),color=255,thick=5
plot,freq(2:*),spec(2,0,2:*)/35.3/1000.*1.E12,/xlog,/ylog,yrange=[1,1000]
oplot,freq(2:*),replicate(51.0,[100000]),color=255,thick=5
plot,freq(2:*),spec(3,0,2:*)/35.3/1000.*1.E12,/xlog,/ylog,yrange=[1,1000]
oplot,freq(2:*),replicate(51.0,[100000]),color=255,thick=5
window,1
plot,freq(2:*),spec(4,0,2:*)/35.3/1000.*1.E12,/xlog,/ylog,yrange=[1,1000]
oplot,freq(2:*),replicate(51.0,[100000]),color=255,thick=5
plot,freq(2:*),spec(5,0,2:*)/35.3/1000.*1.E12,/xlog,/ylog,yrange=[1,1000]
oplot,freq(2:*),replicate(51.0,[100000]),color=255,thick=5
plot,freq(2:*),spec(6,0,2:*)/35.3/1000.*1.E12,/xlog,/ylog,yrange=[1,1000]
oplot,freq(2:*),replicate(51.0,[100000]),color=255,thick=5
plot,freq(2:*),spec(7,0,2:*)/35.3/1000.*1.E12,/xlog,/ylog,yrange=[1,1000]
oplot,freq(2:*),replicate(51.0,[100000]),color=255,thick=5
;##############################################################################################################################
; save freq and spec
;##############################################################################################################################

if keyword_set(save_spec) then save,freq,spec,filename=paths+dir+'/noise'+strmid(filename,10,/reverse_offset)+'.sav',/verbose  ; freq (Hz), fb, error, spec(V/root(Hz)), spec_err

print,'memory required',MEMORY(/highwater)-start_mem

;data=0
return,spec

end

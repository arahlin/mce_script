#!/usr/bin/python
# -*- mode: python -*-

"""
Watch an MCE flatfile for new data, send it out.
"""

from mheadsup import clients, util, geometries
import mce_data

import threading
import time
import os, sys
import numpy

defaults = util.get_defaults()
defaults.update({
    'client_name': 'flatfile',
    'mcefile': '/data/cryo/flatfile',
    'threaded': False,
    })


class mceFileFollower(clients.HeadsupDataSource):
    def __init__(self, addr, name='flatfile', field=None):
        clients.HeadsupDataSource.__init__(self, addr, name)
        self.dshape, self.dmode = None, None
        self.field = field
        self.options = {'delay': .03,
                        'step': 10,
                        'watch': False,
                        'filename': None,
                        'trigger_exit': False,
                        'seek_tail': False,
                        'control_forever': False,
                        'control_active': False,
                        'status_looping': False,
                        'trigger_reinit': False,
                        }
        self.threads = {}

    def cleanup(self):
        expires = time.time() + 2.
        while True:
            ok = True
            for t in self.threads:
                if t.is_alive():
                    ok = False
                    self.options['trigger_exit'] = True
            if ok:
                break
            if time.time() > expires:
                print 'Orphaned threads would not die.'
                break
            time.sleep(.1)

    def _check_thread(self, active=False):
        if self.options['trigger_exit']:
            return False
        tt = threading.current_thread()
        if tt in self.threads:
            return self.threads[tt]
        return True
        
    def go(self, background=True):
        # For background mode, call this function again from a new thread.
        if background:
            tt = threading.Thread(target=self.go, kwargs={'background':False})
            self.threads[tt] = True
            tt.start()
            return tt
        opts = self.options
        dshape = None
        # Main file watch loop
        while self._check_thread():
            # Inform everyone that we made it to the top
            opts['status_looping'] = True
            # Clear the reinit trigger
            opts['trigger_reinit'] = False
            # Are we idle / aimless?
            filename = opts['filename']
            if not opts['control_active'] or \
                    filename == None or \
                    not os.path.exists(filename):
                if opts['watch'] == None:
                    break
                time.sleep(opts['watch'] * 5)
                continue
            # We appear to have some data to process.
            f = mce_data.MCEFile(filename)
            self.mcefile = f
            if opts['seek_tail']:
                # Go to almost end
                n = max(f.n_frames - opts['step'], 0)
            else:
                # Start from beginning
                n = 0
            dmode = '%i (%s)' % (f.data_mode, self.field)
            if self.dmode != dmode:
                self.update_info({'data_mode': dmode})
                self.dmode = dmode
            # Frame reader loop
            while self._check_thread() and not opts['trigger_reinit']:
                dn = opts['step']
                while f.n_frames - n < dn:
                    if opts['watch'] == False:
                        # This is for playback-and-exit mode.
                        n = -1
                        break
                    time.sleep(opts['watch'])
                    f._UpdateNFrames()
                    if dn < f.n_frames < n:
                        # A sign that the file has been reset; do reinit
                        n = -1
                        break
                if n == -1:
                    break
                d = f.Read(start=n, count=dn, row_col=True, field=self.field)
                if dshape == None or d.data.shape[:-1] != dshape:
                    # Update geometries
                    dshape = d.data.shape[:-1]
                    nrow, ncol = dshape
                    geoms = self.get_info().get('geometries', [])
                    for g in geoms:
                        if g['name'] == 'Grid' or g['name'] == 'Grid^T':
                            geoms.remove(g)
                    geoms = [
                            geometries.pixelSetGeometry.for_grid(nrow,ncol,
                                                                 name='Grid'),
                            geometries.pixelSetGeometry.for_grid(nrow,ncol,
                                                                 name='Grid^T'),
                            ]
                    geoms[-1].coords = geoms[-1].coords[::-1]
                    for g in geoms:
                        g.channel_names = get_channel_names(nrow, ncol)
                    # Pass update=True to not trash user's command line choice
                    self.set_geometries(geoms, update=True)
                    
                # Handle control messages
                ok, addr, _ = self.do_receive()
                # Post the data
                self.post_data(d.data[...,-1])
                n += dn
                time.sleep(opts['delay'])
                if not self.connected:
                    print 'Server disconnect, exiting.'
                    opts['control_forever'] = False
                    break
            # Try again?
            if not opts['control_forever']:
                break
        # Cleanup
        opts['status_looping'] = False
        tt = threading.current_thread()
        if tt in self.threads:
            self.threads.pop(tt)
            
    def playback(self, filename, background=False):
        if not os.path.exists(filename):
            print 'Warning: file "%s" does not exist, but we will wait for it.' % \
                filename
        if not background:
            self.cleanup()
            self.options['trigger_exit'] = False
        self.options['filename'] = filename
        self.options['control_active'] = True
        if background and self.options['status_looping']:
            self.options['trigger_reinit'] = True
        else:
            self.go(background=background)

def get_channel_names(nrow, ncol):
    return numpy.array(['r%02ic%02i' % (r,c)
                        for r in range(nrow)
                        for c in range(ncol)])


if __name__ == '__main__':
    o = util.upOptionParser()
    o.add_option('--data-field')
    # For playback of existing file
    o.add_option('--loop', action='store_true')
    o.add_option('--step', type=int, default=None)
    # For following a file on the fly
    o.add_option('--tail', '-F', action='store_true')
    o.add_option('--follow', action='store_true')
    # For specifying display layout
    o.add_option('--geometry-file')
    o.add_option('--geometry-name', default=None, action='append')

    o.add_standard(defaults)
    opts, args = o.parse_args(defaults)

    if len(args) > 0:
        flatfile = args[0]
    else:
        flatfile = defaults['mcefile']

    # Load geometries based on cmd line opts
    if opts.geometry_file != None:
        if opts.geometry_name == None:
            opts.geometry_name = \
                geometries.pixelSetGeometry.get_cp_list(opts.geometry_file)
        geoms = [geometries.pixelSetGeometry.from_cp(opts.geometry_file,k)
                 for k in opts.geometry_name]
    else:
        geoms = []

    mp = mceFileFollower(opts.server_cfg, opts.name,
                         field=opts.data_field)
    if not mp.connected:
        sys.exit(2)
    mp.register_basic_streams()
    mp.set_geometries(geoms)

    if opts.tail:
        opts.follow = True
        mp.options['seek_tail'] = True

    if opts.follow:
        mp.options['control_forever'] = True
        mp.options['delay'] = .01
        mp.options['watch'] = .01

    if opts.step != None:
        mp.step = opts.step
    
    while True:
        mp.playback(flatfile, background=defaults['threaded'])
        if not opts.loop or not mp.connected:
            break
    


#!/usr/bin/python
# -*- mode: python -*-

from mheadsup import clients, util, plotters, qtgfx, gfx, geometries

import sys, os, time
import subprocess
import numpy as np

from PyQt4 import QtCore, QtGui


defaults = util.get_defaults()
defaults.update({
    'client_name': 'qtg',
    })

actions = [
    ('nothing', ''),
    ('reset_offset', 'Scale: restore natural offset'),
    ('auto_offset', 'Scale: remove fixed offset'),
    ('scale_stretch', 'Scale: stretch'),
    ('scale_follow', 'Scale: follow'),
    ('show_data', 'Plot: data'),
    ('show_mask', 'Plot: mask'),
    ]


class qtgPlotter(plotters.displayClient,QtGui.QWidget):
    active_mask = None
    show_mode = 'data'

    trigger_geom = False
    frame_counter = (0, 0, 0.)

    def __init__(self, server=None, name='qtg', img=None, horizontal=False,
                 logger=None):
        plotters.displayClient.__init__(self, server, name)
        QtGui.QWidget.__init__(self)
        
        self.mutex = QtCore.QMutex()
        self.img = []
        self.scale_props = plotters.dataScaleProps()
        
        self.geom_mask = None
        
        self.info = qtgfx.infoSummary()
        self.info.fromTextItemList(self.texts)
        self.info.add_item('frame_rate', 'Incoming rate:', '0.')
        self.info.add_item('display_rate', 'Display rate:', '0.')
        if img is not None:
            self.img.append((img, 'default'))
        
        self.init_gfx(horizontal=horizontal)
        
        if logger is None:
            logger = util.logger()
        self.log = logger

    def init_gfx(self, horizontal=False):
        self.view = qtgfx.tightView()
        self.scene = QtGui.QGraphicsScene()
        self.view.setScene(self.scene)
        self.setLayout(QtGui.QGridLayout())
        self.layout().addWidget(self.view, 0,0)
        layout = QtGui.QGridLayout()
        if horizontal:
            self.layout().addLayout(layout, 0, 1)
        else:
            self.layout().addLayout(layout, 1, 0)
        layout.addWidget(self.info, 0,0)
        self.streamList = qtgfx.simpleCombo()
        self.streamList.currentIndexChanged.connect(self.select_stream)
        self.geomList = qtgfx.simpleCombo()
        self.geomList.currentIndexChanged.connect(self.select_geom)
        self.maskList = qtgfx.simpleCombo()
        self.maskList.currentIndexChanged.connect(self.select_mask)

        self.actionList = qtgfx.simpleCombo()
        self.actionList.set_items(items=actions)
        self.actionList.currentIndexChanged.connect(self.select_action)

        w = QtGui.QGridLayout()
        layout.addLayout(w, 1, 0)
        for i, (n,c) in enumerate(
            [('Stream', self.streamList),
             ('Geometry', self.geomList),
             ('Mask', self.maskList),
             ('Action', self.actionList)]):
            w.addWidget(QtGui.QLabel(n), i, 0)
            w.addWidget(c, i, 1, 1, 2)

        for img in self.img:
            self.scene.addItem(img[0])
        self.view.fitInView(self.scene.itemsBoundingRect(),
                            QtCore.Qt.KeepAspectRatio)

    # Real Q signal handlers
    def select_stream(self, *args):
        idx = args[0]
        if idx < 0:
            self.unsubscribe_data()
            self.data_handler = self.replace_handler(None, self.data_handler)
        else:
            stream_name = self.streamList.get_item(idx)
            if self.data_handler is None or \
                    self.data_handler.stream_name != stream_name:
                self.subscribe_data(stream_name)
        self.img[0][0].reset()
        self.geom_list_changed()

    def select_geom(self, *args):
        idx = args[0]
        if idx >= 0:
            geom_data = self.geomList.get_item(idx)
            self.geom = geometries.pixelSetGeometry.decode(geom_data)
            #self.img[0][0].animateMove(self.geom.coords[0],
            #                           self.geom.coords[1])
            self.img[0][0].create_blips_from_geometry(self.geom)
            if self.geom.channel_names is not None:
                self.img[0][0].channel_names = self.geom.channel_names
            self.geom_mask = self.img[0][0].get_mask()
            
    def select_mask(self, *args):
        idx = args[0]
        if idx <= 0:
            self.active_mask = None
            return
        self.active_mask = self.maskList.get_item(idx)
        
    def select_action(self, *args):
        idx = args[0]
        if idx <= 0:
            return
        action_name = self.actionList.get_item(idx)
        self.actionList.setCurrentIndex(0)
        if action_name == 'reset_offset':
            self.scale_props.clear_offset()
        elif action_name == 'auto_offset':
            self.scale_props.set_grab_offset()
        elif action_name == 'scale_stretch':
            self.scale_props.set_mode('stretch')
        elif action_name == 'scale_follow':
            self.scale_props.set_mode('auto')
        elif action_name == 'show_data':
            self.show_mode = 'data'
        elif action_name == 'show_mask':
            self.show_mode = 'mask'

    # Not Q signal handlers

    def stream_list_changed(self):
        new_stream_names = [s.name for s in self.stream_list_handler.streams
                            if s.properties.get('data_stream')]
        self.streamList.update_items(labels=new_stream_names)

    def geom_list_changed(self):
        if self.data_handler is None:
            geoms = []
        else:
            geoms = [(s['name'], s) for s in self.data_handler.info.
                     get('geometries', [])]
        self.geomList.update_items(items=geoms)
        if len(geoms) == 0:
            self.trigger_geom = True
        elif self.trigger_geom:
            self.trigger_geom = False
            self.select_geom(0)

    def mask_list_changed(self):
        masks = [
            ('None', None),
            ('Local', self.data_mask),
            ] + \
            [(s['name'], s) for s in self.data_handler.info.get('masks', [])]
        self.maskList.update_items(items=masks)

    # Imagery

    def add_image(self, image, image_name=None):
        self.img.append((image, image_name))

    def update_image(self, data=None, idx=0):
        """
        Updates the image, or some aspect of it (scale, zoom, ...).
        """
        if idx >= len(self.img):
            return
        img, _ = self.img[idx]
        if data is None:
            data = self.last_data

        self.last_data = data

        # Data selection mask
        mask = np.ones(data.shape, 'bool')
        if self.active_mask is not None:
            mask *= self.active_mask
        if self.geom_mask is not None:
            mask *= self.geom_mask.reshape(mask.shape)

        if self.show_mode == 'data':
            # Get scaled data
            data = self.scale_props.rescale_data(data, mask=mask,
                                                 mask_val=0.5)
        elif self.show_mode == 'mask':
            # Just show how the mask looks
            data = mask.astype('int')

        img.set_data(data)

    def poll(self):
        self.info.set_text('time_now', '%.1f' % time.time())
        if self.controls.get('exit'):
            print 'Exiting on server request.'
            del self.timer
            del self.state_timer
            self.close()
            app.exit()
        if not self.connected:
            self.connect()
            if not self.connected:
                print 'Exiting on failed reconnect.'
                app.exit()
        if self.controls.get('poll_controls'):
#            self.set_client_var('poll_controls', 1)
            self.controls['poll_controls'] = 0
        if not self.mutex.tryLock():
            return
        with qtgfx.mutexHolder(self.mutex):
            # Process all data in the stream, I guess.
            anything = False
            while True:
                ok, addr, data = self.do_receive()
                if not ok or addr is None:
                    break
                anything = True
                if addr.type != 'data':
                    break
            if not anything:
                self.idle_count += 1
                return

            if self.stream_list_handler is not None:
                sh = self.stream_list_handler
                if sh.changes > 0:
                    self.stream_list_changed()
                    sh.changes = 0

            if self.data_handler is None:
                return

            if self.data_handler.info_update:
                #print 'info_update', self.data_handler.info.keys()
                self.data_handler.info_update = False
                self.info.set_text('data_mode', 
                                   self.data_handler.info.get('data_mode', ''))
                self.geom_list_changed()
                self.mask_list_changed()

            n_frames = len(self.data_handler.frames)
            if n_frames > 0:
                self.info.set_text('time_frame', '%.1f' % time.time())
                data = self.data_handler.frames.pop(0)
                if self.data_mask is None or self.data_mask.shape != data.shape:
                    self.data_mask = np.ones(data.shape, 'bool')
                    self.mask_list_changed()

                # check for clicks?
                if self.img[0][0].last_click is not None:
                    idx = self.img[0][0].last_click
                    if self.geom_mask is not None:
                        idx = self.geom_mask.nonzero()[0][idx]
                    mask_view = self.data_mask.ravel()
                    mask_view[idx] = not mask_view[idx]
                    self.img[0][0].last_click = None
                self.update_image(data)
                if self.idle_count == 0 and n_frames > 10:
                    # Falling behind... change update frequency?
                    print 'Falling behind...'
                    self.data_handler.frames = []
                self.frame_counter = (self.frame_counter[0]+1,
                                      self.frame_counter[1]+n_frames,
                                      self.frame_counter[2])
                self.idle_count = 0

        if 0:
            if op == 'ctrl':
                if 'mask' in item:
                    self.controls['mask_update'] = True
                if 'data_mode' in item:
                    self.info.set_text('data_mode', self.controls['data_mode'])

    def state_update(self):
        self.info.set_text('autoscale', self.scale_props.mode)
        self.info.set_text('zrange_lo', '%f' % self.scale_props.last_limits[0])
        self.info.set_text('zrange_hi', '%f' % self.scale_props.last_limits[1])
        # hover text?
        self.info.set_text('status', self.img[0][0].get_status_text())
        (nd, nf, t0), t1 = self.frame_counter, time.time()
        if (t1-t0) >= 2:
            frate = nf/(t1-t0)
            drate = nd/(t1-t0)
            self.frame_counter = (0, 0, t1)
            self.info.set_text('frame_rate', '%f' % frate)
            self.info.set_text('display_rate', '%f' % drate)
        

    def launch(self, rate=10., refresh_rate=10.):
        self.refresh_rate = refresh_rate
        self.frame_rate = refresh_rate
        self.timer = QtCore.QTimer()
        self.timer.timeout.connect(self.poll)
        self.timer.start(max(1,int(round(1000./self.refresh_rate))))
        self.frame_t0 = None
        self.idle_count = 0
        #pp.set_client_var('rate', rate)

        self.state_timer = QtCore.QTimer()
        self.state_timer.timeout.connect(self.state_update)
        self.state_timer.start(100.)

class PlotQTWindow(QtGui.QMainWindow):
    pass
#    def my_handler(self, *args):
#        print 'ding', args

if __name__ == '__main__':
    o = util.upOptionParser()
    o.add_option('-i','--interactive',action='store_true')
    o.add_option('--horizontal',action='store_true')
    o.add_option('--no-controller',action='store_true')
    o.add_option('--data-rate', type=float, default=10.,
                 help="frame rate to request from server")
    o.add_option('--display-rate', type=float, default=11.,
                 help="rate at which to update the display")
    o.add_option('--profile',
                 help="load a plotting profile file")
    o.add_standard(defaults)
    opts, args = o.parse_args(defaults=defaults)

    config = util.MainConfig()
    
    if opts.interactive and not sys.flags.interactive:
        # Uh, ok.
        sys.exit(subprocess.call(['/usr/bin/python','-i'] + sys.argv))

    # Qt init
    app = QtGui.QApplication([])

    #win = QtGui.QMainWindow()
    win = PlotQTWindow()
    if opts.horizontal:
        win.resize(800,500)
    else:
        win.resize(400,600)
    win.move(100,100)

    img = qtgfx.BlipDisplay()
    img.setAcceptHoverEvents(True)

    pp = qtgPlotter(opts.server_cfg, opts.name, img=img,
                    horizontal=opts.horizontal)
    time.sleep(.1)

    win.setCentralWidget(pp)

    exitAction = QtGui.QAction(app)
    exitAction.setText('Exit')
    exitAction.setShortcut('Ctrl+Q')
    exitAction.setStatusTip('Exit application')

    exitAction.triggered.connect(QtGui.qApp.quit)
    #exitAction.triggered.connect(win.my_handler)
    win.addAction(exitAction)

    # Menus...
    menubar = win.menuBar()
    fileMenu = menubar.addMenu('&File')
    fileMenu.addAction(exitAction)

    win.show()

    pp.launch(rate=opts.data_rate, refresh_rate=opts.display_rate)

    app.exec_()

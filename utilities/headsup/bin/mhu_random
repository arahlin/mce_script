#!/usr/bin/python

"""
Look, this is how easy it is.
"""

from mheadsup import clients, util, geometries

import numpy
import time


def make_custom_layout(shape):
    """
    Create a custom pixel geometry for grid of size shape=(nrow,ncol).
    """
    nr, nc = shape
    xy = []
    r0,c0 = float(nr-1)/2, float(nc-1)/2
    R = max(r0,c0)*.5
    for r in range(nr):
        for c in range(nc):
            y, x = (r-r0), (c-c0)
            R0 = (x**2+y**2)**.5 + 1e-9
            r1 = (R0/R)**-.2 * 1.2
            xy.append((x*r1, y*r1))
    geom = geometries.pixelSetGeometry(shape=shape, name='Bloom')
    geom.coords = zip(*xy)
    geom.forms = 'circle'
    return geom


class randomDataProducer(clients.HeadsupDataSource):
    def __init__(self, server, name='random', shape=(5,5), rate=10.):
        clients.HeadsupDataSource.__init__(self, server, name)
        self.dshape = shape
        self.rate = rate

    def go(self):
        n = 0
        while True:
            n+=1
            time.sleep(1./self.rate)
            d = numpy.random.random(self.dshape).astype('float32')

            self.post_data(d)
            if n == 100:
                self.update_info({'data_mode': 'entropy'})

            # You should do this.
            self.do_receive()
            if not self.connected:
                print 'Connection dropped.'
                return


if __name__ == '__main__':

    o = util.upOptionParser()
    o.add_standard()
    o.add_option('--geometry-file')
    o.add_option('--geometry-name', default='geometry')
    o.add_option('--rate', default=10., type=float)
    opts, args = o.parse_args()

    if opts.geometry_file == None:
        shape = (9,9)
        g0 = make_custom_layout(shape)
        g1 = geometries.pixelSetGeometry.for_grid(name='Grid', *shape)
        geoms = [g0, g1]
    else:
        # Load geometry from a file, randomize the data.
        geoms = [geometries.pixelSetGeometry.from_cp(opts.geometry_file,
                                                     opts.geometry_name)]
        shape = (1, geoms[0].n_pix)
        

    # To define pixel locations.  Note pixels are 1x1.

    # Necessary.
    rdp = randomDataProducer(opts.server_cfg, shape=shape, rate=opts.rate)
    rdp.connect()
    rdp.register_basic_streams()

    rdp.set_geometries(geoms)
    rdp.go()
